// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSD_V3_2_0_ED_CDT_REQUEST_PRIMITIVE_HXX
#define XSD_V3_2_0_ED_CDT_REQUEST_PRIMITIVE_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace onem2m
{
  class requestPrimitive;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "CDT-commonTypes.hxx"

namespace onem2m
{
  class requestPrimitive: public ::xml_schema::type
  {
    public:
    // operation
    //
    typedef ::onem2m::operation operation_type;
    typedef ::xsd::cxx::tree::optional< operation_type > operation_optional;
    typedef ::xsd::cxx::tree::traits< operation_type, char > operation_traits;

    const operation_optional&
    operation () const;

    operation_optional&
    operation ();

    void
    operation (const operation_type& x);

    void
    operation (const operation_optional& x);

    void
    operation (::std::unique_ptr< operation_type > p);

    // to
    //
    typedef ::xml_schema::uri to_type;
    typedef ::xsd::cxx::tree::optional< to_type > to_optional;
    typedef ::xsd::cxx::tree::traits< to_type, char > to_traits;

    const to_optional&
    to () const;

    to_optional&
    to ();

    void
    to (const to_type& x);

    void
    to (const to_optional& x);

    void
    to (::std::unique_ptr< to_type > p);

    // from
    //
    typedef ::onem2m::ID from_type;
    typedef ::xsd::cxx::tree::optional< from_type > from_optional;
    typedef ::xsd::cxx::tree::traits< from_type, char > from_traits;

    const from_optional&
    from () const;

    from_optional&
    from ();

    void
    from (const from_type& x);

    void
    from (const from_optional& x);

    void
    from (::std::unique_ptr< from_type > p);

    // requestIdentifier
    //
    typedef ::onem2m::requestID requestIdentifier_type;
    typedef ::xsd::cxx::tree::optional< requestIdentifier_type > requestIdentifier_optional;
    typedef ::xsd::cxx::tree::traits< requestIdentifier_type, char > requestIdentifier_traits;

    const requestIdentifier_optional&
    requestIdentifier () const;

    requestIdentifier_optional&
    requestIdentifier ();

    void
    requestIdentifier (const requestIdentifier_type& x);

    void
    requestIdentifier (const requestIdentifier_optional& x);

    void
    requestIdentifier (::std::unique_ptr< requestIdentifier_type > p);

    // resourceType
    //
    typedef ::onem2m::resourceType resourceType_type;
    typedef ::xsd::cxx::tree::optional< resourceType_type > resourceType_optional;
    typedef ::xsd::cxx::tree::traits< resourceType_type, char > resourceType_traits;

    const resourceType_optional&
    resourceType () const;

    resourceType_optional&
    resourceType ();

    void
    resourceType (const resourceType_type& x);

    void
    resourceType (const resourceType_optional& x);

    void
    resourceType (::std::unique_ptr< resourceType_type > p);

    // primitiveContent
    //
    typedef ::onem2m::primitiveContent primitiveContent_type;
    typedef ::xsd::cxx::tree::optional< primitiveContent_type > primitiveContent_optional;
    typedef ::xsd::cxx::tree::traits< primitiveContent_type, char > primitiveContent_traits;

    const primitiveContent_optional&
    primitiveContent () const;

    primitiveContent_optional&
    primitiveContent ();

    void
    primitiveContent (const primitiveContent_type& x);

    void
    primitiveContent (const primitiveContent_optional& x);

    void
    primitiveContent (::std::unique_ptr< primitiveContent_type > p);

    // originatingTimestamp
    //
    typedef ::onem2m::timestamp originatingTimestamp_type;
    typedef ::xsd::cxx::tree::optional< originatingTimestamp_type > originatingTimestamp_optional;
    typedef ::xsd::cxx::tree::traits< originatingTimestamp_type, char > originatingTimestamp_traits;

    const originatingTimestamp_optional&
    originatingTimestamp () const;

    originatingTimestamp_optional&
    originatingTimestamp ();

    void
    originatingTimestamp (const originatingTimestamp_type& x);

    void
    originatingTimestamp (const originatingTimestamp_optional& x);

    void
    originatingTimestamp (::std::unique_ptr< originatingTimestamp_type > p);

    // requestExpirationTimestamp
    //
    typedef ::onem2m::absRelTimestamp requestExpirationTimestamp_type;
    typedef ::xsd::cxx::tree::optional< requestExpirationTimestamp_type > requestExpirationTimestamp_optional;
    typedef ::xsd::cxx::tree::traits< requestExpirationTimestamp_type, char > requestExpirationTimestamp_traits;

    const requestExpirationTimestamp_optional&
    requestExpirationTimestamp () const;

    requestExpirationTimestamp_optional&
    requestExpirationTimestamp ();

    void
    requestExpirationTimestamp (const requestExpirationTimestamp_type& x);

    void
    requestExpirationTimestamp (const requestExpirationTimestamp_optional& x);

    void
    requestExpirationTimestamp (::std::unique_ptr< requestExpirationTimestamp_type > p);

    // resultExpirationTimestamp
    //
    typedef ::onem2m::absRelTimestamp resultExpirationTimestamp_type;
    typedef ::xsd::cxx::tree::optional< resultExpirationTimestamp_type > resultExpirationTimestamp_optional;
    typedef ::xsd::cxx::tree::traits< resultExpirationTimestamp_type, char > resultExpirationTimestamp_traits;

    const resultExpirationTimestamp_optional&
    resultExpirationTimestamp () const;

    resultExpirationTimestamp_optional&
    resultExpirationTimestamp ();

    void
    resultExpirationTimestamp (const resultExpirationTimestamp_type& x);

    void
    resultExpirationTimestamp (const resultExpirationTimestamp_optional& x);

    void
    resultExpirationTimestamp (::std::unique_ptr< resultExpirationTimestamp_type > p);

    // operationExecutionTime
    //
    typedef ::onem2m::absRelTimestamp operationExecutionTime_type;
    typedef ::xsd::cxx::tree::optional< operationExecutionTime_type > operationExecutionTime_optional;
    typedef ::xsd::cxx::tree::traits< operationExecutionTime_type, char > operationExecutionTime_traits;

    const operationExecutionTime_optional&
    operationExecutionTime () const;

    operationExecutionTime_optional&
    operationExecutionTime ();

    void
    operationExecutionTime (const operationExecutionTime_type& x);

    void
    operationExecutionTime (const operationExecutionTime_optional& x);

    void
    operationExecutionTime (::std::unique_ptr< operationExecutionTime_type > p);

    // responseType
    //
    typedef ::onem2m::responseTypeInfo responseType_type;
    typedef ::xsd::cxx::tree::optional< responseType_type > responseType_optional;
    typedef ::xsd::cxx::tree::traits< responseType_type, char > responseType_traits;

    const responseType_optional&
    responseType () const;

    responseType_optional&
    responseType ();

    void
    responseType (const responseType_type& x);

    void
    responseType (const responseType_optional& x);

    void
    responseType (::std::unique_ptr< responseType_type > p);

    // resultPersistence
    //
    typedef ::onem2m::absRelTimestamp resultPersistence_type;
    typedef ::xsd::cxx::tree::optional< resultPersistence_type > resultPersistence_optional;
    typedef ::xsd::cxx::tree::traits< resultPersistence_type, char > resultPersistence_traits;

    const resultPersistence_optional&
    resultPersistence () const;

    resultPersistence_optional&
    resultPersistence ();

    void
    resultPersistence (const resultPersistence_type& x);

    void
    resultPersistence (const resultPersistence_optional& x);

    void
    resultPersistence (::std::unique_ptr< resultPersistence_type > p);

    // Constructors.
    //
    requestPrimitive ();

    requestPrimitive (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    requestPrimitive (const requestPrimitive& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual requestPrimitive*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    requestPrimitive&
    operator= (const requestPrimitive& x);

    virtual 
    ~requestPrimitive ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    operation_optional operation_;
    to_optional to_;
    from_optional from_;
    requestIdentifier_optional requestIdentifier_;
    resourceType_optional resourceType_;
    primitiveContent_optional primitiveContent_;
    originatingTimestamp_optional originatingTimestamp_;
    requestExpirationTimestamp_optional requestExpirationTimestamp_;
    resultExpirationTimestamp_optional resultExpirationTimestamp_;
    operationExecutionTime_optional operationExecutionTime_;
    responseType_optional responseType_;
    resultPersistence_optional resultPersistence_;
  };
}

#include <iosfwd>

namespace onem2m
{
  ::std::ostream&
  operator<< (::std::ostream&, const requestPrimitive&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace onem2m
{
  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::onem2m::requestPrimitive >
  requestPrimitive_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::requestPrimitive >
  requestPrimitive_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::requestPrimitive >
  requestPrimitive_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::onem2m::requestPrimitive >
  requestPrimitive_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::requestPrimitive >
  requestPrimitive_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::requestPrimitive >
  requestPrimitive_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::requestPrimitive >
  requestPrimitive_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::requestPrimitive >
  requestPrimitive_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::requestPrimitive >
  requestPrimitive_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::onem2m::requestPrimitive >
  requestPrimitive_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::requestPrimitive >
  requestPrimitive_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::requestPrimitive >
  requestPrimitive_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::onem2m::requestPrimitive >
  requestPrimitive_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::requestPrimitive >
  requestPrimitive_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace onem2m
{
  // Serialize to std::ostream.
  //

  void
  requestPrimitive_ (::std::ostream& os,
                     const ::onem2m::requestPrimitive& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  requestPrimitive_ (::std::ostream& os,
                     const ::onem2m::requestPrimitive& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  requestPrimitive_ (::std::ostream& os,
                     const ::onem2m::requestPrimitive& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  requestPrimitive_ (::xercesc::XMLFormatTarget& ft,
                     const ::onem2m::requestPrimitive& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  requestPrimitive_ (::xercesc::XMLFormatTarget& ft,
                     const ::onem2m::requestPrimitive& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  requestPrimitive_ (::xercesc::XMLFormatTarget& ft,
                     const ::onem2m::requestPrimitive& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  requestPrimitive_ (::xercesc::DOMDocument& d,
                     const ::onem2m::requestPrimitive& x,
                     ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  requestPrimitive_ (const ::onem2m::requestPrimitive& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const requestPrimitive&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XSD_V3_2_0_ED_CDT_REQUEST_PRIMITIVE_HXX
