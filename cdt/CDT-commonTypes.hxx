// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSD_V3_2_0_ED_CDT_COMMON_TYPES_HXX
#define XSD_V3_2_0_ED_CDT_COMMON_TYPES_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace onem2m
{
  class ID;
  class nodeID;
  class deviceID;
  class externalID;
  class requestID;
  class roleID;
  class tokenID;
  class nhURI;
  class acpType_base;
  class acpType;
  class labels_base;
  class labels;
  class triggerRecipientID;
  class listOfM2MID_base;
  class listOfM2MID;
  class longMin_1;
  class listOfMinMax_base;
  class listOfMinMax;
  class signatureList_base;
  class signatureList;
  class base64url;
  class ipv4;
  class ipv6;
  class poaList_base;
  class poaList;
  class timestamp;
  class absRelTimestamp;
  class missingDataList;
  class listOfTimeStamp_base;
  class listOfTimeStamp;
  class listOfRelTimeStamp_base;
  class listOfRelTimeStamp;
  class typeOfContent;
  class permittedMediaTypes;
  class serializations_base;
  class serializations;
  class contentInfo;
  class scheduleEntry;
  class listOfURIs_base;
  class listOfURIs;
  class listOfDuration;
  class attributeList;
  class resourceTypeList_base;
  class resourceTypeList;
  class sparql;
  class descriptorRepresentation;
  class e2eCompactJWS;
  class e2eCompactJWE;
  class dynAuthJWT;
  class resourceName;
  class primitiveContentBase;
  class primitiveContent;
  class filterCriteria;
  class attribute;
  class scheduleEntries;
  class childResourceRef;
  class responseTypeInfo;
  class contentRef;
  class deletionContexts;
  class locationRegion;
  class countryCode;
  class missingData;
  class dataLink;
  class resource;
  class regularResource;
  class announceableResource;
  class announcedResource;
  class announceableSubordinateResource;
  class subordinateResource;
  class announcedSubordinateResource;
  class mgmtResource;
  class announcedMgmtResource;
  class listOfNCNames_base;
  class listOfNCNames;
  class absRelTimestamp_member;
  class absRelTimestamp_member1;
  class missingDataList_member;
  class missingDataList_member1;
  class dynAuthJWT_member;
  class dynAuthJWT_member1;
  class notificationURI_base;
  class notificationURI;
  class URIReference;
  class countryCode1_base;
  class countryCode1;
  class circRegion_base;
  class circRegion;
  class announcedAttribute_base;
  class announcedAttribute;
  class announcedAttribute1_base;
  class announcedAttribute1;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "CDT-enumerationTypes.hxx"

namespace onem2m
{
  class ID: public ::xml_schema::uri
  {
    public:
    // Constructors.
    //
    ID (const ::xml_schema::uri&);

    ID (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    ID (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    ID (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    ID (const ID& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

    virtual ID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ID ();
  };

  class nodeID: public ::xml_schema::token
  {
    public:
    // Constructors.
    //
    nodeID ();

    nodeID (const char*);

    nodeID (const ::std::string&);

    nodeID (const ::xml_schema::token&);

    nodeID (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    nodeID (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    nodeID (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    nodeID (const nodeID& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual nodeID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~nodeID ();
  };

  class deviceID: public ::xml_schema::token
  {
    public:
    // Constructors.
    //
    deviceID ();

    deviceID (const char*);

    deviceID (const ::std::string&);

    deviceID (const ::xml_schema::token&);

    deviceID (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    deviceID (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    deviceID (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    deviceID (const deviceID& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual deviceID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~deviceID ();
  };

  class externalID: public ::xml_schema::token
  {
    public:
    // Constructors.
    //
    externalID ();

    externalID (const char*);

    externalID (const ::std::string&);

    externalID (const ::xml_schema::token&);

    externalID (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    externalID (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    externalID (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    externalID (const externalID& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual externalID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~externalID ();
  };

  class requestID: public ::xml_schema::token
  {
    public:
    // Constructors.
    //
    requestID ();

    requestID (const char*);

    requestID (const ::std::string&);

    requestID (const ::xml_schema::token&);

    requestID (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    requestID (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    requestID (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    requestID (const requestID& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual requestID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~requestID ();
  };

  class roleID: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    roleID ();

    roleID (const char*);

    roleID (const ::std::string&);

    roleID (const ::xml_schema::string&);

    roleID (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    roleID (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    roleID (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    roleID (const roleID& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual roleID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~roleID ();
  };

  class tokenID: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    tokenID ();

    tokenID (const char*);

    tokenID (const ::std::string&);

    tokenID (const ::xml_schema::string&);

    tokenID (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    tokenID (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    tokenID (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    tokenID (const tokenID& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual tokenID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~tokenID ();
  };

  class nhURI: public ::xml_schema::uri
  {
    public:
    // Constructors.
    //
    nhURI (const ::xml_schema::uri&);

    nhURI (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    nhURI (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    nhURI (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    nhURI (const nhURI& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual nhURI*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~nhURI ();
  };

  class acpType_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::onem2m::ID, char >
  {
    public:
    acpType_base ();

    acpType_base (size_type n, const ::onem2m::ID& x);

    template < typename I >
    acpType_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::onem2m::ID, char > (begin, end, this)
    {
    }

    acpType_base (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    acpType_base (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    acpType_base (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    acpType_base (const acpType_base& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual acpType_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~acpType_base ();
  };

  class acpType: public ::onem2m::acpType_base
  {
    public:
    // Constructors.
    //
    acpType ();

    acpType (const ::onem2m::acpType_base&);

    acpType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    acpType (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    acpType (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    acpType (const acpType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual acpType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~acpType ();
  };

  class labels_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::token, char >
  {
    public:
    labels_base ();

    labels_base (size_type n, const ::xml_schema::token& x);

    template < typename I >
    labels_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::token, char > (begin, end, this)
    {
    }

    labels_base (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    labels_base (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    labels_base (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    labels_base (const labels_base& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual labels_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~labels_base ();
  };

  class labels: public ::onem2m::labels_base
  {
    public:
    // Constructors.
    //
    labels ();

    labels (const ::onem2m::labels_base&);

    labels (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    labels (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    labels (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    labels (const labels& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual labels*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~labels ();
  };

  class triggerRecipientID: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    triggerRecipientID (const ::xml_schema::unsigned_int&);

    triggerRecipientID (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    triggerRecipientID (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    triggerRecipientID (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    triggerRecipientID (const triggerRecipientID& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual triggerRecipientID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~triggerRecipientID ();
  };

  class listOfM2MID_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::onem2m::ID, char >
  {
    public:
    listOfM2MID_base ();

    listOfM2MID_base (size_type n, const ::onem2m::ID& x);

    template < typename I >
    listOfM2MID_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::onem2m::ID, char > (begin, end, this)
    {
    }

    listOfM2MID_base (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    listOfM2MID_base (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    listOfM2MID_base (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    listOfM2MID_base (const listOfM2MID_base& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual listOfM2MID_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~listOfM2MID_base ();
  };

  class listOfM2MID: public ::onem2m::listOfM2MID_base
  {
    public:
    // Constructors.
    //
    listOfM2MID ();

    listOfM2MID (const ::onem2m::listOfM2MID_base&);

    listOfM2MID (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    listOfM2MID (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    listOfM2MID (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    listOfM2MID (const listOfM2MID& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual listOfM2MID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~listOfM2MID ();
  };

  class longMin_1: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    longMin_1 (const ::xml_schema::long_&);

    longMin_1 (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    longMin_1 (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    longMin_1 (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    longMin_1 (const longMin_1& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual longMin_1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~longMin_1 ();
  };

  class listOfMinMax_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::onem2m::longMin_1, char >
  {
    public:
    listOfMinMax_base ();

    listOfMinMax_base (size_type n, const ::onem2m::longMin_1& x);

    template < typename I >
    listOfMinMax_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::onem2m::longMin_1, char > (begin, end, this)
    {
    }

    listOfMinMax_base (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    listOfMinMax_base (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    listOfMinMax_base (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    listOfMinMax_base (const listOfMinMax_base& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual listOfMinMax_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~listOfMinMax_base ();
  };

  class listOfMinMax: public ::onem2m::listOfMinMax_base
  {
    public:
    // Constructors.
    //
    listOfMinMax ();

    listOfMinMax (const ::onem2m::listOfMinMax_base&);

    listOfMinMax (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    listOfMinMax (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    listOfMinMax (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    listOfMinMax (const listOfMinMax& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual listOfMinMax*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~listOfMinMax ();
  };

  class signatureList_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::onem2m::base64url, char >
  {
    public:
    signatureList_base ();

    signatureList_base (size_type n, const ::onem2m::base64url& x);

    template < typename I >
    signatureList_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::onem2m::base64url, char > (begin, end, this)
    {
    }

    signatureList_base (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    signatureList_base (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    signatureList_base (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    signatureList_base (const signatureList_base& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual signatureList_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~signatureList_base ();
  };

  class signatureList: public ::onem2m::signatureList_base
  {
    public:
    // Constructors.
    //
    signatureList ();

    signatureList (const ::onem2m::signatureList_base&);

    signatureList (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    signatureList (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    signatureList (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    signatureList (const signatureList& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual signatureList*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~signatureList ();
  };

  class base64url: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    base64url ();

    base64url (const char*);

    base64url (const ::std::string&);

    base64url (const ::xml_schema::string&);

    base64url (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    base64url (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    base64url (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    base64url (const base64url& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual base64url*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~base64url ();
  };

  class ipv4: public ::xml_schema::token
  {
    public:
    // Constructors.
    //
    ipv4 ();

    ipv4 (const char*);

    ipv4 (const ::std::string&);

    ipv4 (const ::xml_schema::token&);

    ipv4 (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    ipv4 (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    ipv4 (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    ipv4 (const ipv4& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual ipv4*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ipv4 ();
  };

  class ipv6: public ::xml_schema::token
  {
    public:
    // Constructors.
    //
    ipv6 ();

    ipv6 (const char*);

    ipv6 (const ::std::string&);

    ipv6 (const ::xml_schema::token&);

    ipv6 (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    ipv6 (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    ipv6 (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    ipv6 (const ipv6& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual ipv6*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ipv6 ();
  };

  class poaList_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::string, char >
  {
    public:
    poaList_base ();

    poaList_base (size_type n, const ::xml_schema::string& x);

    template < typename I >
    poaList_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::string, char > (begin, end, this)
    {
    }

    poaList_base (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    poaList_base (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    poaList_base (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    poaList_base (const poaList_base& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual poaList_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~poaList_base ();
  };

  class poaList: public ::onem2m::poaList_base
  {
    public:
    // Constructors.
    //
    poaList ();

    poaList (const ::onem2m::poaList_base&);

    poaList (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    poaList (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    poaList (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    poaList (const poaList& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual poaList*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~poaList ();
  };

  class timestamp: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    timestamp ();

    timestamp (const char*);

    timestamp (const ::std::string&);

    timestamp (const ::xml_schema::string&);

    timestamp (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    timestamp (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    timestamp (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    timestamp (const timestamp& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual timestamp*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~timestamp ();
  };

  class absRelTimestamp: public ::xml_schema::string
  {
    public:

    absRelTimestamp (const char* v);

    absRelTimestamp (const ::std::string& v);

    absRelTimestamp (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    absRelTimestamp (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    absRelTimestamp (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    absRelTimestamp (const absRelTimestamp& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual absRelTimestamp*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class missingDataList: public ::xml_schema::string
  {
    public:

    missingDataList (const char* v);

    missingDataList (const ::std::string& v);

    missingDataList (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    missingDataList (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    missingDataList (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    missingDataList (const missingDataList& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual missingDataList*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class listOfTimeStamp_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::onem2m::timestamp, char >
  {
    public:
    listOfTimeStamp_base ();

    listOfTimeStamp_base (size_type n, const ::onem2m::timestamp& x);

    template < typename I >
    listOfTimeStamp_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::onem2m::timestamp, char > (begin, end, this)
    {
    }

    listOfTimeStamp_base (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    listOfTimeStamp_base (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    listOfTimeStamp_base (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    listOfTimeStamp_base (const listOfTimeStamp_base& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual listOfTimeStamp_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~listOfTimeStamp_base ();
  };

  class listOfTimeStamp: public ::onem2m::listOfTimeStamp_base
  {
    public:
    // Constructors.
    //
    listOfTimeStamp ();

    listOfTimeStamp (const ::onem2m::listOfTimeStamp_base&);

    listOfTimeStamp (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    listOfTimeStamp (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    listOfTimeStamp (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    listOfTimeStamp (const listOfTimeStamp& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual listOfTimeStamp*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~listOfTimeStamp ();
  };

  class listOfRelTimeStamp_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::long_, char >
  {
    public:
    listOfRelTimeStamp_base ();

    listOfRelTimeStamp_base (size_type n, const ::xml_schema::long_& x);

    template < typename I >
    listOfRelTimeStamp_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::long_, char > (begin, end, this)
    {
    }

    listOfRelTimeStamp_base (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    listOfRelTimeStamp_base (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    listOfRelTimeStamp_base (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    listOfRelTimeStamp_base (const listOfRelTimeStamp_base& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual listOfRelTimeStamp_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~listOfRelTimeStamp_base ();
  };

  class listOfRelTimeStamp: public ::onem2m::listOfRelTimeStamp_base
  {
    public:
    // Constructors.
    //
    listOfRelTimeStamp ();

    listOfRelTimeStamp (const ::onem2m::listOfRelTimeStamp_base&);

    listOfRelTimeStamp (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    listOfRelTimeStamp (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    listOfRelTimeStamp (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    listOfRelTimeStamp (const listOfRelTimeStamp& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual listOfRelTimeStamp*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~listOfRelTimeStamp ();
  };

  class typeOfContent: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    typeOfContent ();

    typeOfContent (const char*);

    typeOfContent (const ::std::string&);

    typeOfContent (const ::xml_schema::string&);

    typeOfContent (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    typeOfContent (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    typeOfContent (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    typeOfContent (const typeOfContent& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual typeOfContent*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~typeOfContent ();
  };

  class permittedMediaTypes: public ::onem2m::typeOfContent
  {
    public:
    enum value
    {
      application_xml,
      application_json,
      application_cbor
    };

    permittedMediaTypes (value v);

    permittedMediaTypes (const char* v);

    permittedMediaTypes (const ::std::string& v);

    permittedMediaTypes (const ::onem2m::typeOfContent& v);

    permittedMediaTypes (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    permittedMediaTypes (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    permittedMediaTypes (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    permittedMediaTypes (const permittedMediaTypes& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual permittedMediaTypes*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    permittedMediaTypes&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_permittedMediaTypes_convert ();
    }

    protected:
    value
    _xsd_permittedMediaTypes_convert () const;

    public:
    static const char* const _xsd_permittedMediaTypes_literals_[3];
    static const value _xsd_permittedMediaTypes_indexes_[3];
  };

  class serializations_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::onem2m::permittedMediaTypes, char >
  {
    public:
    serializations_base ();

    serializations_base (size_type n, const ::onem2m::permittedMediaTypes& x);

    template < typename I >
    serializations_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::onem2m::permittedMediaTypes, char > (begin, end, this)
    {
    }

    serializations_base (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    serializations_base (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    serializations_base (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    serializations_base (const serializations_base& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual serializations_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~serializations_base ();
  };

  class serializations: public ::onem2m::serializations_base
  {
    public:
    // Constructors.
    //
    serializations ();

    serializations (const ::onem2m::serializations_base&);

    serializations (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    serializations (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    serializations (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    serializations (const serializations& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual serializations*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~serializations ();
  };

  class contentInfo: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    contentInfo ();

    contentInfo (const char*);

    contentInfo (const ::std::string&);

    contentInfo (const ::xml_schema::string&);

    contentInfo (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    contentInfo (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    contentInfo (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    contentInfo (const contentInfo& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual contentInfo*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~contentInfo ();
  };

  class scheduleEntry: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    scheduleEntry ();

    scheduleEntry (const char*);

    scheduleEntry (const ::std::string&);

    scheduleEntry (const ::xml_schema::string&);

    scheduleEntry (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    scheduleEntry (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    scheduleEntry (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    scheduleEntry (const scheduleEntry& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual scheduleEntry*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~scheduleEntry ();
  };

  class listOfURIs_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::uri, char >
  {
    public:
    listOfURIs_base ();

    listOfURIs_base (size_type n, const ::xml_schema::uri& x);

    template < typename I >
    listOfURIs_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::uri, char > (begin, end, this)
    {
    }

    listOfURIs_base (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    listOfURIs_base (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    listOfURIs_base (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    listOfURIs_base (const listOfURIs_base& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual listOfURIs_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~listOfURIs_base ();
  };

  class listOfURIs: public ::onem2m::listOfURIs_base
  {
    public:
    // Constructors.
    //
    listOfURIs ();

    listOfURIs (const ::onem2m::listOfURIs_base&);

    listOfURIs (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    listOfURIs (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    listOfURIs (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    listOfURIs (const listOfURIs& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual listOfURIs*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~listOfURIs ();
  };

  class listOfDuration: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::duration, char >
  {
    public:
    listOfDuration ();

    listOfDuration (size_type n, const ::xml_schema::duration& x);

    template < typename I >
    listOfDuration (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::duration, char > (begin, end, this)
    {
    }

    listOfDuration (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    listOfDuration (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    listOfDuration (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    listOfDuration (const listOfDuration& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual listOfDuration*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~listOfDuration ();
  };

  class attributeList: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::ncname, char >
  {
    public:
    attributeList ();

    attributeList (size_type n, const ::xml_schema::ncname& x);

    template < typename I >
    attributeList (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::ncname, char > (begin, end, this)
    {
    }

    attributeList (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    attributeList (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    attributeList (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    attributeList (const attributeList& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual attributeList*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~attributeList ();
  };

  class resourceTypeList_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::onem2m::resourceType, char >
  {
    public:
    resourceTypeList_base ();

    resourceTypeList_base (size_type n, const ::onem2m::resourceType& x);

    template < typename I >
    resourceTypeList_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::onem2m::resourceType, char > (begin, end, this)
    {
    }

    resourceTypeList_base (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    resourceTypeList_base (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    resourceTypeList_base (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    resourceTypeList_base (const resourceTypeList_base& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual resourceTypeList_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~resourceTypeList_base ();
  };

  class resourceTypeList: public ::onem2m::resourceTypeList_base
  {
    public:
    // Constructors.
    //
    resourceTypeList ();

    resourceTypeList (const ::onem2m::resourceTypeList_base&);

    resourceTypeList (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    resourceTypeList (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    resourceTypeList (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    resourceTypeList (const resourceTypeList& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual resourceTypeList*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~resourceTypeList ();
  };

  class sparql: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    sparql ();

    sparql (const char*);

    sparql (const ::std::string&);

    sparql (const ::xml_schema::string&);

    sparql (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    sparql (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    sparql (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    sparql (const sparql& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual sparql*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~sparql ();
  };

  class descriptorRepresentation: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    descriptorRepresentation ();

    descriptorRepresentation (const char*);

    descriptorRepresentation (const ::std::string&);

    descriptorRepresentation (const ::xml_schema::string&);

    descriptorRepresentation (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    descriptorRepresentation (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    descriptorRepresentation (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    descriptorRepresentation (const descriptorRepresentation& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    virtual descriptorRepresentation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~descriptorRepresentation ();
  };

  class e2eCompactJWS: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    e2eCompactJWS ();

    e2eCompactJWS (const char*);

    e2eCompactJWS (const ::std::string&);

    e2eCompactJWS (const ::xml_schema::string&);

    e2eCompactJWS (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    e2eCompactJWS (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    e2eCompactJWS (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    e2eCompactJWS (const e2eCompactJWS& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual e2eCompactJWS*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~e2eCompactJWS ();
  };

  class e2eCompactJWE: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    e2eCompactJWE ();

    e2eCompactJWE (const char*);

    e2eCompactJWE (const ::std::string&);

    e2eCompactJWE (const ::xml_schema::string&);

    e2eCompactJWE (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    e2eCompactJWE (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    e2eCompactJWE (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    e2eCompactJWE (const e2eCompactJWE& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual e2eCompactJWE*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~e2eCompactJWE ();
  };

  class dynAuthJWT: public ::xml_schema::string
  {
    public:

    dynAuthJWT (const char* v);

    dynAuthJWT (const ::std::string& v);

    dynAuthJWT (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    dynAuthJWT (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    dynAuthJWT (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    dynAuthJWT (const dynAuthJWT& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual dynAuthJWT*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class resourceName: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    resourceName ();

    resourceName (const char*);

    resourceName (const ::std::string&);

    resourceName (const ::xml_schema::string&);

    resourceName (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    resourceName (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    resourceName (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    resourceName (const resourceName& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual resourceName*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~resourceName ();
  };

  class primitiveContentBase: public ::xml_schema::type
  {
    public:
    // any
    //
    typedef ::xsd::cxx::tree::element_optional any_optional;

    const any_optional&
    any () const;

    any_optional&
    any ();

    void
    any (const ::xercesc::DOMElement& e);

    void
    any (::xercesc::DOMElement* p);

    void
    any (const any_optional& x);

    // any1
    //
    typedef ::xsd::cxx::tree::element_optional any1_optional;

    const any1_optional&
    any1 () const;

    any1_optional&
    any1 ();

    void
    any1 (const ::xercesc::DOMElement& e);

    void
    any1 (::xercesc::DOMElement* p);

    void
    any1 (const any1_optional& x);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    primitiveContentBase ();

    primitiveContentBase (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    primitiveContentBase (const primitiveContentBase& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual primitiveContentBase*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    primitiveContentBase&
    operator= (const primitiveContentBase& x);

    virtual 
    ~primitiveContentBase ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > dom_document_;

    any_optional any_;
    any1_optional any1_;
  };

  class filterCriteria: public ::xml_schema::type
  {
    public:
    // createdBefore
    //
    typedef ::onem2m::timestamp createdBefore_type;
    typedef ::xsd::cxx::tree::optional< createdBefore_type > createdBefore_optional;
    typedef ::xsd::cxx::tree::traits< createdBefore_type, char > createdBefore_traits;

    const createdBefore_optional&
    createdBefore () const;

    createdBefore_optional&
    createdBefore ();

    void
    createdBefore (const createdBefore_type& x);

    void
    createdBefore (const createdBefore_optional& x);

    void
    createdBefore (::std::unique_ptr< createdBefore_type > p);

    // createdAfter
    //
    typedef ::onem2m::timestamp createdAfter_type;
    typedef ::xsd::cxx::tree::optional< createdAfter_type > createdAfter_optional;
    typedef ::xsd::cxx::tree::traits< createdAfter_type, char > createdAfter_traits;

    const createdAfter_optional&
    createdAfter () const;

    createdAfter_optional&
    createdAfter ();

    void
    createdAfter (const createdAfter_type& x);

    void
    createdAfter (const createdAfter_optional& x);

    void
    createdAfter (::std::unique_ptr< createdAfter_type > p);

    // modifiedSince
    //
    typedef ::onem2m::timestamp modifiedSince_type;
    typedef ::xsd::cxx::tree::optional< modifiedSince_type > modifiedSince_optional;
    typedef ::xsd::cxx::tree::traits< modifiedSince_type, char > modifiedSince_traits;

    const modifiedSince_optional&
    modifiedSince () const;

    modifiedSince_optional&
    modifiedSince ();

    void
    modifiedSince (const modifiedSince_type& x);

    void
    modifiedSince (const modifiedSince_optional& x);

    void
    modifiedSince (::std::unique_ptr< modifiedSince_type > p);

    // unmodifiedSince
    //
    typedef ::onem2m::timestamp unmodifiedSince_type;
    typedef ::xsd::cxx::tree::optional< unmodifiedSince_type > unmodifiedSince_optional;
    typedef ::xsd::cxx::tree::traits< unmodifiedSince_type, char > unmodifiedSince_traits;

    const unmodifiedSince_optional&
    unmodifiedSince () const;

    unmodifiedSince_optional&
    unmodifiedSince ();

    void
    unmodifiedSince (const unmodifiedSince_type& x);

    void
    unmodifiedSince (const unmodifiedSince_optional& x);

    void
    unmodifiedSince (::std::unique_ptr< unmodifiedSince_type > p);

    // stateTagSmaller
    //
    typedef ::xml_schema::positive_integer stateTagSmaller_type;
    typedef ::xsd::cxx::tree::optional< stateTagSmaller_type > stateTagSmaller_optional;
    typedef ::xsd::cxx::tree::traits< stateTagSmaller_type, char > stateTagSmaller_traits;

    const stateTagSmaller_optional&
    stateTagSmaller () const;

    stateTagSmaller_optional&
    stateTagSmaller ();

    void
    stateTagSmaller (const stateTagSmaller_type& x);

    void
    stateTagSmaller (const stateTagSmaller_optional& x);

    // stateTagBigger
    //
    typedef ::xml_schema::non_negative_integer stateTagBigger_type;
    typedef ::xsd::cxx::tree::optional< stateTagBigger_type > stateTagBigger_optional;
    typedef ::xsd::cxx::tree::traits< stateTagBigger_type, char > stateTagBigger_traits;

    const stateTagBigger_optional&
    stateTagBigger () const;

    stateTagBigger_optional&
    stateTagBigger ();

    void
    stateTagBigger (const stateTagBigger_type& x);

    void
    stateTagBigger (const stateTagBigger_optional& x);

    // expireBefore
    //
    typedef ::onem2m::timestamp expireBefore_type;
    typedef ::xsd::cxx::tree::optional< expireBefore_type > expireBefore_optional;
    typedef ::xsd::cxx::tree::traits< expireBefore_type, char > expireBefore_traits;

    const expireBefore_optional&
    expireBefore () const;

    expireBefore_optional&
    expireBefore ();

    void
    expireBefore (const expireBefore_type& x);

    void
    expireBefore (const expireBefore_optional& x);

    void
    expireBefore (::std::unique_ptr< expireBefore_type > p);

    // expireAfter
    //
    typedef ::onem2m::timestamp expireAfter_type;
    typedef ::xsd::cxx::tree::optional< expireAfter_type > expireAfter_optional;
    typedef ::xsd::cxx::tree::traits< expireAfter_type, char > expireAfter_traits;

    const expireAfter_optional&
    expireAfter () const;

    expireAfter_optional&
    expireAfter ();

    void
    expireAfter (const expireAfter_type& x);

    void
    expireAfter (const expireAfter_optional& x);

    void
    expireAfter (::std::unique_ptr< expireAfter_type > p);

    // labels
    //
    typedef ::onem2m::labels labels_type;
    typedef ::xsd::cxx::tree::optional< labels_type > labels_optional;
    typedef ::xsd::cxx::tree::traits< labels_type, char > labels_traits;

    const labels_optional&
    labels () const;

    labels_optional&
    labels ();

    void
    labels (const labels_type& x);

    void
    labels (const labels_optional& x);

    void
    labels (::std::unique_ptr< labels_type > p);

    // labelsQuery
    //
    typedef ::xml_schema::string labelsQuery_type;
    typedef ::xsd::cxx::tree::optional< labelsQuery_type > labelsQuery_optional;
    typedef ::xsd::cxx::tree::traits< labelsQuery_type, char > labelsQuery_traits;

    const labelsQuery_optional&
    labelsQuery () const;

    labelsQuery_optional&
    labelsQuery ();

    void
    labelsQuery (const labelsQuery_type& x);

    void
    labelsQuery (const labelsQuery_optional& x);

    void
    labelsQuery (::std::unique_ptr< labelsQuery_type > p);

    // resourceType
    //
    typedef ::onem2m::resourceTypeList resourceType_type;
    typedef ::xsd::cxx::tree::optional< resourceType_type > resourceType_optional;
    typedef ::xsd::cxx::tree::traits< resourceType_type, char > resourceType_traits;

    const resourceType_optional&
    resourceType () const;

    resourceType_optional&
    resourceType ();

    void
    resourceType (const resourceType_type& x);

    void
    resourceType (const resourceType_optional& x);

    void
    resourceType (::std::unique_ptr< resourceType_type > p);

    // sizeAbove
    //
    typedef ::xml_schema::non_negative_integer sizeAbove_type;
    typedef ::xsd::cxx::tree::optional< sizeAbove_type > sizeAbove_optional;
    typedef ::xsd::cxx::tree::traits< sizeAbove_type, char > sizeAbove_traits;

    const sizeAbove_optional&
    sizeAbove () const;

    sizeAbove_optional&
    sizeAbove ();

    void
    sizeAbove (const sizeAbove_type& x);

    void
    sizeAbove (const sizeAbove_optional& x);

    // sizeBelow
    //
    typedef ::xml_schema::positive_integer sizeBelow_type;
    typedef ::xsd::cxx::tree::optional< sizeBelow_type > sizeBelow_optional;
    typedef ::xsd::cxx::tree::traits< sizeBelow_type, char > sizeBelow_traits;

    const sizeBelow_optional&
    sizeBelow () const;

    sizeBelow_optional&
    sizeBelow ();

    void
    sizeBelow (const sizeBelow_type& x);

    void
    sizeBelow (const sizeBelow_optional& x);

    // contentType
    //
    typedef ::onem2m::typeOfContent contentType_type;
    typedef ::xsd::cxx::tree::sequence< contentType_type > contentType_sequence;
    typedef contentType_sequence::iterator contentType_iterator;
    typedef contentType_sequence::const_iterator contentType_const_iterator;
    typedef ::xsd::cxx::tree::traits< contentType_type, char > contentType_traits;

    const contentType_sequence&
    contentType () const;

    contentType_sequence&
    contentType ();

    void
    contentType (const contentType_sequence& s);

    // attribute
    //
    typedef ::onem2m::attribute attribute_type;
    typedef ::xsd::cxx::tree::sequence< attribute_type > attribute_sequence;
    typedef attribute_sequence::iterator attribute_iterator;
    typedef attribute_sequence::const_iterator attribute_const_iterator;
    typedef ::xsd::cxx::tree::traits< attribute_type, char > attribute_traits;

    const attribute_sequence&
    attribute () const;

    attribute_sequence&
    attribute ();

    void
    attribute (const attribute_sequence& s);

    // filterUsage
    //
    typedef ::onem2m::filterUsage filterUsage_type;
    typedef ::xsd::cxx::tree::optional< filterUsage_type > filterUsage_optional;
    typedef ::xsd::cxx::tree::traits< filterUsage_type, char > filterUsage_traits;

    const filterUsage_optional&
    filterUsage () const;

    filterUsage_optional&
    filterUsage ();

    void
    filterUsage (const filterUsage_type& x);

    void
    filterUsage (const filterUsage_optional& x);

    void
    filterUsage (::std::unique_ptr< filterUsage_type > p);

    // limit
    //
    typedef ::xml_schema::non_negative_integer limit_type;
    typedef ::xsd::cxx::tree::optional< limit_type > limit_optional;
    typedef ::xsd::cxx::tree::traits< limit_type, char > limit_traits;

    const limit_optional&
    limit () const;

    limit_optional&
    limit ();

    void
    limit (const limit_type& x);

    void
    limit (const limit_optional& x);

    // semanticsFilter
    //
    typedef ::onem2m::sparql semanticsFilter_type;
    typedef ::xsd::cxx::tree::sequence< semanticsFilter_type > semanticsFilter_sequence;
    typedef semanticsFilter_sequence::iterator semanticsFilter_iterator;
    typedef semanticsFilter_sequence::const_iterator semanticsFilter_const_iterator;
    typedef ::xsd::cxx::tree::traits< semanticsFilter_type, char > semanticsFilter_traits;

    const semanticsFilter_sequence&
    semanticsFilter () const;

    semanticsFilter_sequence&
    semanticsFilter ();

    void
    semanticsFilter (const semanticsFilter_sequence& s);

    // filterOperation
    //
    typedef ::xml_schema::boolean filterOperation_type;
    typedef ::xsd::cxx::tree::optional< filterOperation_type > filterOperation_optional;
    typedef ::xsd::cxx::tree::traits< filterOperation_type, char > filterOperation_traits;

    const filterOperation_optional&
    filterOperation () const;

    filterOperation_optional&
    filterOperation ();

    void
    filterOperation (const filterOperation_type& x);

    void
    filterOperation (const filterOperation_optional& x);

    // contentFilterSyntax
    //
    typedef ::onem2m::contentFilterSyntax contentFilterSyntax_type;
    typedef ::xsd::cxx::tree::optional< contentFilterSyntax_type > contentFilterSyntax_optional;
    typedef ::xsd::cxx::tree::traits< contentFilterSyntax_type, char > contentFilterSyntax_traits;

    const contentFilterSyntax_optional&
    contentFilterSyntax () const;

    contentFilterSyntax_optional&
    contentFilterSyntax ();

    void
    contentFilterSyntax (const contentFilterSyntax_type& x);

    void
    contentFilterSyntax (const contentFilterSyntax_optional& x);

    void
    contentFilterSyntax (::std::unique_ptr< contentFilterSyntax_type > p);

    // contentFilterQuery
    //
    typedef ::xml_schema::string contentFilterQuery_type;
    typedef ::xsd::cxx::tree::optional< contentFilterQuery_type > contentFilterQuery_optional;
    typedef ::xsd::cxx::tree::traits< contentFilterQuery_type, char > contentFilterQuery_traits;

    const contentFilterQuery_optional&
    contentFilterQuery () const;

    contentFilterQuery_optional&
    contentFilterQuery ();

    void
    contentFilterQuery (const contentFilterQuery_type& x);

    void
    contentFilterQuery (const contentFilterQuery_optional& x);

    void
    contentFilterQuery (::std::unique_ptr< contentFilterQuery_type > p);

    // level
    //
    typedef ::xml_schema::positive_integer level_type;
    typedef ::xsd::cxx::tree::optional< level_type > level_optional;
    typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

    const level_optional&
    level () const;

    level_optional&
    level ();

    void
    level (const level_type& x);

    void
    level (const level_optional& x);

    // offset
    //
    typedef ::xml_schema::positive_integer offset_type;
    typedef ::xsd::cxx::tree::optional< offset_type > offset_optional;
    typedef ::xsd::cxx::tree::traits< offset_type, char > offset_traits;

    const offset_optional&
    offset () const;

    offset_optional&
    offset ();

    void
    offset (const offset_type& x);

    void
    offset (const offset_optional& x);

    // Constructors.
    //
    filterCriteria ();

    filterCriteria (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    filterCriteria (const filterCriteria& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual filterCriteria*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    filterCriteria&
    operator= (const filterCriteria& x);

    virtual 
    ~filterCriteria ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    createdBefore_optional createdBefore_;
    createdAfter_optional createdAfter_;
    modifiedSince_optional modifiedSince_;
    unmodifiedSince_optional unmodifiedSince_;
    stateTagSmaller_optional stateTagSmaller_;
    stateTagBigger_optional stateTagBigger_;
    expireBefore_optional expireBefore_;
    expireAfter_optional expireAfter_;
    labels_optional labels_;
    labelsQuery_optional labelsQuery_;
    resourceType_optional resourceType_;
    sizeAbove_optional sizeAbove_;
    sizeBelow_optional sizeBelow_;
    contentType_sequence contentType_;
    attribute_sequence attribute_;
    filterUsage_optional filterUsage_;
    limit_optional limit_;
    semanticsFilter_sequence semanticsFilter_;
    filterOperation_optional filterOperation_;
    contentFilterSyntax_optional contentFilterSyntax_;
    contentFilterQuery_optional contentFilterQuery_;
    level_optional level_;
    offset_optional offset_;
  };

  class attribute: public ::xml_schema::type
  {
    public:
    // name
    //
    typedef ::xml_schema::ncname name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // value
    //
    typedef ::xml_schema::type value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::unique_ptr< value_type > p);

    // Constructors.
    //
    attribute (const name_type&,
               const value_type&);

    attribute (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    attribute (const attribute& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual attribute*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    attribute&
    operator= (const attribute& x);

    virtual 
    ~attribute ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class scheduleEntries: public ::xml_schema::type
  {
    public:
    // scheduleEntry
    //
    typedef ::onem2m::scheduleEntry scheduleEntry_type;
    typedef ::xsd::cxx::tree::sequence< scheduleEntry_type > scheduleEntry_sequence;
    typedef scheduleEntry_sequence::iterator scheduleEntry_iterator;
    typedef scheduleEntry_sequence::const_iterator scheduleEntry_const_iterator;
    typedef ::xsd::cxx::tree::traits< scheduleEntry_type, char > scheduleEntry_traits;

    const scheduleEntry_sequence&
    scheduleEntry () const;

    scheduleEntry_sequence&
    scheduleEntry ();

    void
    scheduleEntry (const scheduleEntry_sequence& s);

    // Constructors.
    //
    scheduleEntries ();

    scheduleEntries (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    scheduleEntries (const scheduleEntries& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual scheduleEntries*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    scheduleEntries&
    operator= (const scheduleEntries& x);

    virtual 
    ~scheduleEntries ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    scheduleEntry_sequence scheduleEntry_;
  };

  class childResourceRef: public ::xml_schema::uri
  {
    public:
    // name
    //
    typedef ::onem2m::resourceName name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // type
    //
    typedef ::onem2m::resourceType type_type;
    typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

    const type_type&
    type () const;

    type_type&
    type ();

    void
    type (const type_type& x);

    void
    type (::std::unique_ptr< type_type > p);

    // specializationID
    //
    typedef ::xml_schema::uri specializationID_type;
    typedef ::xsd::cxx::tree::optional< specializationID_type > specializationID_optional;
    typedef ::xsd::cxx::tree::traits< specializationID_type, char > specializationID_traits;

    const specializationID_optional&
    specializationID () const;

    specializationID_optional&
    specializationID ();

    void
    specializationID (const specializationID_type& x);

    void
    specializationID (const specializationID_optional& x);

    void
    specializationID (::std::unique_ptr< specializationID_type > p);

    // Constructors.
    //
    childResourceRef (const ::xml_schema::uri&,
                      const name_type&,
                      const type_type&);

    childResourceRef (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    childResourceRef (const childResourceRef& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual childResourceRef*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    childResourceRef&
    operator= (const childResourceRef& x);

    virtual 
    ~childResourceRef ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< type_type > type_;
    specializationID_optional specializationID_;
  };

  class responseTypeInfo: public ::xml_schema::type
  {
    public:
    // responseTypeValue
    //
    typedef ::onem2m::responseType responseTypeValue_type;
    typedef ::xsd::cxx::tree::traits< responseTypeValue_type, char > responseTypeValue_traits;

    const responseTypeValue_type&
    responseTypeValue () const;

    responseTypeValue_type&
    responseTypeValue ();

    void
    responseTypeValue (const responseTypeValue_type& x);

    void
    responseTypeValue (::std::unique_ptr< responseTypeValue_type > p);

    // notificationURI
    //
    typedef ::onem2m::notificationURI notificationURI_type;
    typedef ::xsd::cxx::tree::optional< notificationURI_type > notificationURI_optional;
    typedef ::xsd::cxx::tree::traits< notificationURI_type, char > notificationURI_traits;

    const notificationURI_optional&
    notificationURI () const;

    notificationURI_optional&
    notificationURI ();

    void
    notificationURI (const notificationURI_type& x);

    void
    notificationURI (const notificationURI_optional& x);

    void
    notificationURI (::std::unique_ptr< notificationURI_type > p);

    // Constructors.
    //
    responseTypeInfo (const responseTypeValue_type&);

    responseTypeInfo (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    responseTypeInfo (const responseTypeInfo& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual responseTypeInfo*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    responseTypeInfo&
    operator= (const responseTypeInfo& x);

    virtual 
    ~responseTypeInfo ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< responseTypeValue_type > responseTypeValue_;
    notificationURI_optional notificationURI_;
  };

  class contentRef: public ::xml_schema::type
  {
    public:
    // URIReference
    //
    typedef ::onem2m::URIReference URIReference_type;
    typedef ::xsd::cxx::tree::sequence< URIReference_type > URIReference_sequence;
    typedef URIReference_sequence::iterator URIReference_iterator;
    typedef URIReference_sequence::const_iterator URIReference_const_iterator;
    typedef ::xsd::cxx::tree::traits< URIReference_type, char > URIReference_traits;

    const URIReference_sequence&
    URIReference () const;

    URIReference_sequence&
    URIReference ();

    void
    URIReference (const URIReference_sequence& s);

    // Constructors.
    //
    contentRef ();

    contentRef (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    contentRef (const contentRef& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual contentRef*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    contentRef&
    operator= (const contentRef& x);

    virtual 
    ~contentRef ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    URIReference_sequence URIReference_;
  };

  class deletionContexts: public ::xml_schema::type
  {
    public:
    // timeOfDay
    //
    typedef ::onem2m::scheduleEntry timeOfDay_type;
    typedef ::xsd::cxx::tree::sequence< timeOfDay_type > timeOfDay_sequence;
    typedef timeOfDay_sequence::iterator timeOfDay_iterator;
    typedef timeOfDay_sequence::const_iterator timeOfDay_const_iterator;
    typedef ::xsd::cxx::tree::traits< timeOfDay_type, char > timeOfDay_traits;

    const timeOfDay_sequence&
    timeOfDay () const;

    timeOfDay_sequence&
    timeOfDay ();

    void
    timeOfDay (const timeOfDay_sequence& s);

    // locationRegions
    //
    typedef ::onem2m::locationRegion locationRegions_type;
    typedef ::xsd::cxx::tree::sequence< locationRegions_type > locationRegions_sequence;
    typedef locationRegions_sequence::iterator locationRegions_iterator;
    typedef locationRegions_sequence::const_iterator locationRegions_const_iterator;
    typedef ::xsd::cxx::tree::traits< locationRegions_type, char > locationRegions_traits;

    const locationRegions_sequence&
    locationRegions () const;

    locationRegions_sequence&
    locationRegions ();

    void
    locationRegions (const locationRegions_sequence& s);

    // Constructors.
    //
    deletionContexts ();

    deletionContexts (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    deletionContexts (const deletionContexts& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual deletionContexts*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    deletionContexts&
    operator= (const deletionContexts& x);

    virtual 
    ~deletionContexts ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    timeOfDay_sequence timeOfDay_;
    locationRegions_sequence locationRegions_;
  };

  class locationRegion: public ::xml_schema::type
  {
    public:
    // countryCode
    //
    typedef ::onem2m::countryCode1 countryCode_type;
    typedef ::xsd::cxx::tree::optional< countryCode_type > countryCode_optional;
    typedef ::xsd::cxx::tree::traits< countryCode_type, char > countryCode_traits;

    const countryCode_optional&
    countryCode () const;

    countryCode_optional&
    countryCode ();

    void
    countryCode (const countryCode_type& x);

    void
    countryCode (const countryCode_optional& x);

    void
    countryCode (::std::unique_ptr< countryCode_type > p);

    // circRegion
    //
    typedef ::onem2m::circRegion circRegion_type;
    typedef ::xsd::cxx::tree::optional< circRegion_type > circRegion_optional;
    typedef ::xsd::cxx::tree::traits< circRegion_type, char > circRegion_traits;

    const circRegion_optional&
    circRegion () const;

    circRegion_optional&
    circRegion ();

    void
    circRegion (const circRegion_type& x);

    void
    circRegion (const circRegion_optional& x);

    void
    circRegion (::std::unique_ptr< circRegion_type > p);

    // Constructors.
    //
    locationRegion ();

    locationRegion (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    locationRegion (const locationRegion& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual locationRegion*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    locationRegion&
    operator= (const locationRegion& x);

    virtual 
    ~locationRegion ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    countryCode_optional countryCode_;
    circRegion_optional circRegion_;
  };

  class countryCode: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    countryCode ();

    countryCode (const char*);

    countryCode (const ::std::string&);

    countryCode (const ::xml_schema::string&);

    countryCode (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    countryCode (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    countryCode (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    countryCode (const countryCode& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual countryCode*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~countryCode ();
  };

  class missingData: public ::xml_schema::type
  {
    public:
    // number
    //
    typedef ::xml_schema::non_negative_integer number_type;
    typedef ::xsd::cxx::tree::traits< number_type, char > number_traits;

    const number_type&
    number () const;

    number_type&
    number ();

    void
    number (const number_type& x);

    // duration
    //
    typedef ::xml_schema::duration duration_type;
    typedef ::xsd::cxx::tree::traits< duration_type, char > duration_traits;

    const duration_type&
    duration () const;

    duration_type&
    duration ();

    void
    duration (const duration_type& x);

    void
    duration (::std::unique_ptr< duration_type > p);

    // Constructors.
    //
    missingData (const number_type&,
                 const duration_type&);

    missingData (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    missingData (const missingData& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual missingData*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    missingData&
    operator= (const missingData& x);

    virtual 
    ~missingData ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< number_type > number_;
    ::xsd::cxx::tree::one< duration_type > duration_;
  };

  class dataLink: public ::xml_schema::type
  {
    public:
    // name
    //
    typedef ::xml_schema::uri name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // dataContainerID
    //
    typedef ::onem2m::ID dataContainerID_type;
    typedef ::xsd::cxx::tree::traits< dataContainerID_type, char > dataContainerID_traits;

    const dataContainerID_type&
    dataContainerID () const;

    dataContainerID_type&
    dataContainerID ();

    void
    dataContainerID (const dataContainerID_type& x);

    void
    dataContainerID (::std::unique_ptr< dataContainerID_type > p);

    // attributeName
    //
    typedef ::xml_schema::ncname attributeName_type;
    typedef ::xsd::cxx::tree::optional< attributeName_type > attributeName_optional;
    typedef ::xsd::cxx::tree::traits< attributeName_type, char > attributeName_traits;

    const attributeName_optional&
    attributeName () const;

    attributeName_optional&
    attributeName ();

    void
    attributeName (const attributeName_type& x);

    void
    attributeName (const attributeName_optional& x);

    void
    attributeName (::std::unique_ptr< attributeName_type > p);

    // Constructors.
    //
    dataLink (const name_type&,
              const dataContainerID_type&);

    dataLink (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    dataLink (const dataLink& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual dataLink*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    dataLink&
    operator= (const dataLink& x);

    virtual 
    ~dataLink ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< dataContainerID_type > dataContainerID_;
    attributeName_optional attributeName_;
  };

  class resource: public ::xml_schema::type
  {
    public:
    // resourceType
    //
    typedef ::onem2m::resourceType resourceType_type;
    typedef ::xsd::cxx::tree::optional< resourceType_type > resourceType_optional;
    typedef ::xsd::cxx::tree::traits< resourceType_type, char > resourceType_traits;

    const resourceType_optional&
    resourceType () const;

    resourceType_optional&
    resourceType ();

    void
    resourceType (const resourceType_type& x);

    void
    resourceType (const resourceType_optional& x);

    void
    resourceType (::std::unique_ptr< resourceType_type > p);

    // resourceID
    //
    typedef ::onem2m::ID resourceID_type;
    typedef ::xsd::cxx::tree::optional< resourceID_type > resourceID_optional;
    typedef ::xsd::cxx::tree::traits< resourceID_type, char > resourceID_traits;

    const resourceID_optional&
    resourceID () const;

    resourceID_optional&
    resourceID ();

    void
    resourceID (const resourceID_type& x);

    void
    resourceID (const resourceID_optional& x);

    void
    resourceID (::std::unique_ptr< resourceID_type > p);

    // parentID
    //
    typedef ::onem2m::nhURI parentID_type;
    typedef ::xsd::cxx::tree::optional< parentID_type > parentID_optional;
    typedef ::xsd::cxx::tree::traits< parentID_type, char > parentID_traits;

    const parentID_optional&
    parentID () const;

    parentID_optional&
    parentID ();

    void
    parentID (const parentID_type& x);

    void
    parentID (const parentID_optional& x);

    void
    parentID (::std::unique_ptr< parentID_type > p);

    // creationTime
    //
    typedef ::onem2m::timestamp creationTime_type;
    typedef ::xsd::cxx::tree::optional< creationTime_type > creationTime_optional;
    typedef ::xsd::cxx::tree::traits< creationTime_type, char > creationTime_traits;

    const creationTime_optional&
    creationTime () const;

    creationTime_optional&
    creationTime ();

    void
    creationTime (const creationTime_type& x);

    void
    creationTime (const creationTime_optional& x);

    void
    creationTime (::std::unique_ptr< creationTime_type > p);

    // lastModifiedTime
    //
    typedef ::onem2m::timestamp lastModifiedTime_type;
    typedef ::xsd::cxx::tree::optional< lastModifiedTime_type > lastModifiedTime_optional;
    typedef ::xsd::cxx::tree::traits< lastModifiedTime_type, char > lastModifiedTime_traits;

    const lastModifiedTime_optional&
    lastModifiedTime () const;

    lastModifiedTime_optional&
    lastModifiedTime ();

    void
    lastModifiedTime (const lastModifiedTime_type& x);

    void
    lastModifiedTime (const lastModifiedTime_optional& x);

    void
    lastModifiedTime (::std::unique_ptr< lastModifiedTime_type > p);

    // labels
    //
    typedef ::onem2m::labels labels_type;
    typedef ::xsd::cxx::tree::optional< labels_type > labels_optional;
    typedef ::xsd::cxx::tree::traits< labels_type, char > labels_traits;

    const labels_optional&
    labels () const;

    labels_optional&
    labels ();

    void
    labels (const labels_type& x);

    void
    labels (const labels_optional& x);

    void
    labels (::std::unique_ptr< labels_type > p);

    // resourceName
    //
    typedef ::onem2m::resourceName resourceName_type;
    typedef ::xsd::cxx::tree::optional< resourceName_type > resourceName_optional;
    typedef ::xsd::cxx::tree::traits< resourceName_type, char > resourceName_traits;

    const resourceName_optional&
    resourceName () const;

    resourceName_optional&
    resourceName ();

    void
    resourceName (const resourceName_type& x);

    void
    resourceName (const resourceName_optional& x);

    void
    resourceName (::std::unique_ptr< resourceName_type > p);

    // Constructors.
    //
    resource ();

    resource (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    resource (const resource& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual resource*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    resource&
    operator= (const resource& x);

    virtual 
    ~resource ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    resourceType_optional resourceType_;
    resourceID_optional resourceID_;
    parentID_optional parentID_;
    creationTime_optional creationTime_;
    lastModifiedTime_optional lastModifiedTime_;
    labels_optional labels_;
    resourceName_optional resourceName_;
  };

  class regularResource: public ::onem2m::resource
  {
    public:
    // accessControlPolicyIDs
    //
    typedef ::onem2m::acpType accessControlPolicyIDs_type;
    typedef ::xsd::cxx::tree::optional< accessControlPolicyIDs_type > accessControlPolicyIDs_optional;
    typedef ::xsd::cxx::tree::traits< accessControlPolicyIDs_type, char > accessControlPolicyIDs_traits;

    const accessControlPolicyIDs_optional&
    accessControlPolicyIDs () const;

    accessControlPolicyIDs_optional&
    accessControlPolicyIDs ();

    void
    accessControlPolicyIDs (const accessControlPolicyIDs_type& x);

    void
    accessControlPolicyIDs (const accessControlPolicyIDs_optional& x);

    void
    accessControlPolicyIDs (::std::unique_ptr< accessControlPolicyIDs_type > p);

    // expirationTime
    //
    typedef ::onem2m::timestamp expirationTime_type;
    typedef ::xsd::cxx::tree::optional< expirationTime_type > expirationTime_optional;
    typedef ::xsd::cxx::tree::traits< expirationTime_type, char > expirationTime_traits;

    const expirationTime_optional&
    expirationTime () const;

    expirationTime_optional&
    expirationTime ();

    void
    expirationTime (const expirationTime_type& x);

    void
    expirationTime (const expirationTime_optional& x);

    void
    expirationTime (::std::unique_ptr< expirationTime_type > p);

    // dynamicAuthorizationConsultationIDs
    //
    typedef ::onem2m::listOfURIs dynamicAuthorizationConsultationIDs_type;
    typedef ::xsd::cxx::tree::optional< dynamicAuthorizationConsultationIDs_type > dynamicAuthorizationConsultationIDs_optional;
    typedef ::xsd::cxx::tree::traits< dynamicAuthorizationConsultationIDs_type, char > dynamicAuthorizationConsultationIDs_traits;

    const dynamicAuthorizationConsultationIDs_optional&
    dynamicAuthorizationConsultationIDs () const;

    dynamicAuthorizationConsultationIDs_optional&
    dynamicAuthorizationConsultationIDs ();

    void
    dynamicAuthorizationConsultationIDs (const dynamicAuthorizationConsultationIDs_type& x);

    void
    dynamicAuthorizationConsultationIDs (const dynamicAuthorizationConsultationIDs_optional& x);

    void
    dynamicAuthorizationConsultationIDs (::std::unique_ptr< dynamicAuthorizationConsultationIDs_type > p);

    // Constructors.
    //
    regularResource ();

    regularResource (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    regularResource (const regularResource& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual regularResource*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    regularResource&
    operator= (const regularResource& x);

    virtual 
    ~regularResource ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    accessControlPolicyIDs_optional accessControlPolicyIDs_;
    expirationTime_optional expirationTime_;
    dynamicAuthorizationConsultationIDs_optional dynamicAuthorizationConsultationIDs_;
  };

  class announceableResource: public ::onem2m::regularResource
  {
    public:
    // announceTo
    //
    typedef ::onem2m::listOfURIs announceTo_type;
    typedef ::xsd::cxx::tree::optional< announceTo_type > announceTo_optional;
    typedef ::xsd::cxx::tree::traits< announceTo_type, char > announceTo_traits;

    const announceTo_optional&
    announceTo () const;

    announceTo_optional&
    announceTo ();

    void
    announceTo (const announceTo_type& x);

    void
    announceTo (const announceTo_optional& x);

    void
    announceTo (::std::unique_ptr< announceTo_type > p);

    // announcedAttribute
    //
    typedef ::onem2m::announcedAttribute announcedAttribute_type;
    typedef ::xsd::cxx::tree::optional< announcedAttribute_type > announcedAttribute_optional;
    typedef ::xsd::cxx::tree::traits< announcedAttribute_type, char > announcedAttribute_traits;

    const announcedAttribute_optional&
    announcedAttribute () const;

    announcedAttribute_optional&
    announcedAttribute ();

    void
    announcedAttribute (const announcedAttribute_type& x);

    void
    announcedAttribute (const announcedAttribute_optional& x);

    void
    announcedAttribute (::std::unique_ptr< announcedAttribute_type > p);

    // Constructors.
    //
    announceableResource ();

    announceableResource (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    announceableResource (const announceableResource& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual announceableResource*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    announceableResource&
    operator= (const announceableResource& x);

    virtual 
    ~announceableResource ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    announceTo_optional announceTo_;
    announcedAttribute_optional announcedAttribute_;
  };

  class announcedResource: public ::onem2m::resource
  {
    public:
    // accessControlPolicyIDs
    //
    typedef ::onem2m::acpType accessControlPolicyIDs_type;
    typedef ::xsd::cxx::tree::optional< accessControlPolicyIDs_type > accessControlPolicyIDs_optional;
    typedef ::xsd::cxx::tree::traits< accessControlPolicyIDs_type, char > accessControlPolicyIDs_traits;

    const accessControlPolicyIDs_optional&
    accessControlPolicyIDs () const;

    accessControlPolicyIDs_optional&
    accessControlPolicyIDs ();

    void
    accessControlPolicyIDs (const accessControlPolicyIDs_type& x);

    void
    accessControlPolicyIDs (const accessControlPolicyIDs_optional& x);

    void
    accessControlPolicyIDs (::std::unique_ptr< accessControlPolicyIDs_type > p);

    // expirationTime
    //
    typedef ::onem2m::timestamp expirationTime_type;
    typedef ::xsd::cxx::tree::optional< expirationTime_type > expirationTime_optional;
    typedef ::xsd::cxx::tree::traits< expirationTime_type, char > expirationTime_traits;

    const expirationTime_optional&
    expirationTime () const;

    expirationTime_optional&
    expirationTime ();

    void
    expirationTime (const expirationTime_type& x);

    void
    expirationTime (const expirationTime_optional& x);

    void
    expirationTime (::std::unique_ptr< expirationTime_type > p);

    // link
    //
    typedef ::xml_schema::uri link_type;
    typedef ::xsd::cxx::tree::optional< link_type > link_optional;
    typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

    const link_optional&
    link () const;

    link_optional&
    link ();

    void
    link (const link_type& x);

    void
    link (const link_optional& x);

    void
    link (::std::unique_ptr< link_type > p);

    // dynamicAuthorizationConsultationIDs
    //
    typedef ::onem2m::listOfURIs dynamicAuthorizationConsultationIDs_type;
    typedef ::xsd::cxx::tree::optional< dynamicAuthorizationConsultationIDs_type > dynamicAuthorizationConsultationIDs_optional;
    typedef ::xsd::cxx::tree::traits< dynamicAuthorizationConsultationIDs_type, char > dynamicAuthorizationConsultationIDs_traits;

    const dynamicAuthorizationConsultationIDs_optional&
    dynamicAuthorizationConsultationIDs () const;

    dynamicAuthorizationConsultationIDs_optional&
    dynamicAuthorizationConsultationIDs ();

    void
    dynamicAuthorizationConsultationIDs (const dynamicAuthorizationConsultationIDs_type& x);

    void
    dynamicAuthorizationConsultationIDs (const dynamicAuthorizationConsultationIDs_optional& x);

    void
    dynamicAuthorizationConsultationIDs (::std::unique_ptr< dynamicAuthorizationConsultationIDs_type > p);

    // Constructors.
    //
    announcedResource ();

    announcedResource (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    announcedResource (const announcedResource& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual announcedResource*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    announcedResource&
    operator= (const announcedResource& x);

    virtual 
    ~announcedResource ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    accessControlPolicyIDs_optional accessControlPolicyIDs_;
    expirationTime_optional expirationTime_;
    link_optional link_;
    dynamicAuthorizationConsultationIDs_optional dynamicAuthorizationConsultationIDs_;
  };

  class announceableSubordinateResource: public ::onem2m::resource
  {
    public:
    // expirationTime
    //
    typedef ::onem2m::timestamp expirationTime_type;
    typedef ::xsd::cxx::tree::optional< expirationTime_type > expirationTime_optional;
    typedef ::xsd::cxx::tree::traits< expirationTime_type, char > expirationTime_traits;

    const expirationTime_optional&
    expirationTime () const;

    expirationTime_optional&
    expirationTime ();

    void
    expirationTime (const expirationTime_type& x);

    void
    expirationTime (const expirationTime_optional& x);

    void
    expirationTime (::std::unique_ptr< expirationTime_type > p);

    // announceTo
    //
    typedef ::onem2m::listOfURIs announceTo_type;
    typedef ::xsd::cxx::tree::optional< announceTo_type > announceTo_optional;
    typedef ::xsd::cxx::tree::traits< announceTo_type, char > announceTo_traits;

    const announceTo_optional&
    announceTo () const;

    announceTo_optional&
    announceTo ();

    void
    announceTo (const announceTo_type& x);

    void
    announceTo (const announceTo_optional& x);

    void
    announceTo (::std::unique_ptr< announceTo_type > p);

    // announcedAttribute
    //
    typedef ::onem2m::announcedAttribute1 announcedAttribute_type;
    typedef ::xsd::cxx::tree::optional< announcedAttribute_type > announcedAttribute_optional;
    typedef ::xsd::cxx::tree::traits< announcedAttribute_type, char > announcedAttribute_traits;

    const announcedAttribute_optional&
    announcedAttribute () const;

    announcedAttribute_optional&
    announcedAttribute ();

    void
    announcedAttribute (const announcedAttribute_type& x);

    void
    announcedAttribute (const announcedAttribute_optional& x);

    void
    announcedAttribute (::std::unique_ptr< announcedAttribute_type > p);

    // Constructors.
    //
    announceableSubordinateResource ();

    announceableSubordinateResource (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

    announceableSubordinateResource (const announceableSubordinateResource& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

    virtual announceableSubordinateResource*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    announceableSubordinateResource&
    operator= (const announceableSubordinateResource& x);

    virtual 
    ~announceableSubordinateResource ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    expirationTime_optional expirationTime_;
    announceTo_optional announceTo_;
    announcedAttribute_optional announcedAttribute_;
  };

  class subordinateResource: public ::onem2m::resource
  {
    public:
    // expirationTime
    //
    typedef ::onem2m::timestamp expirationTime_type;
    typedef ::xsd::cxx::tree::optional< expirationTime_type > expirationTime_optional;
    typedef ::xsd::cxx::tree::traits< expirationTime_type, char > expirationTime_traits;

    const expirationTime_optional&
    expirationTime () const;

    expirationTime_optional&
    expirationTime ();

    void
    expirationTime (const expirationTime_type& x);

    void
    expirationTime (const expirationTime_optional& x);

    void
    expirationTime (::std::unique_ptr< expirationTime_type > p);

    // Constructors.
    //
    subordinateResource ();

    subordinateResource (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    subordinateResource (const subordinateResource& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual subordinateResource*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    subordinateResource&
    operator= (const subordinateResource& x);

    virtual 
    ~subordinateResource ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    expirationTime_optional expirationTime_;
  };

  class announcedSubordinateResource: public ::onem2m::resource
  {
    public:
    // expirationTime
    //
    typedef ::onem2m::timestamp expirationTime_type;
    typedef ::xsd::cxx::tree::optional< expirationTime_type > expirationTime_optional;
    typedef ::xsd::cxx::tree::traits< expirationTime_type, char > expirationTime_traits;

    const expirationTime_optional&
    expirationTime () const;

    expirationTime_optional&
    expirationTime ();

    void
    expirationTime (const expirationTime_type& x);

    void
    expirationTime (const expirationTime_optional& x);

    void
    expirationTime (::std::unique_ptr< expirationTime_type > p);

    // link
    //
    typedef ::xml_schema::uri link_type;
    typedef ::xsd::cxx::tree::optional< link_type > link_optional;
    typedef ::xsd::cxx::tree::traits< link_type, char > link_traits;

    const link_optional&
    link () const;

    link_optional&
    link ();

    void
    link (const link_type& x);

    void
    link (const link_optional& x);

    void
    link (::std::unique_ptr< link_type > p);

    // Constructors.
    //
    announcedSubordinateResource ();

    announcedSubordinateResource (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    announcedSubordinateResource (const announcedSubordinateResource& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

    virtual announcedSubordinateResource*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    announcedSubordinateResource&
    operator= (const announcedSubordinateResource& x);

    virtual 
    ~announcedSubordinateResource ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    expirationTime_optional expirationTime_;
    link_optional link_;
  };

  class mgmtResource: public ::onem2m::announceableResource
  {
    public:
    // mgmtDefinition
    //
    typedef ::onem2m::mgmtDefinition mgmtDefinition_type;
    typedef ::xsd::cxx::tree::optional< mgmtDefinition_type > mgmtDefinition_optional;
    typedef ::xsd::cxx::tree::traits< mgmtDefinition_type, char > mgmtDefinition_traits;

    const mgmtDefinition_optional&
    mgmtDefinition () const;

    mgmtDefinition_optional&
    mgmtDefinition ();

    void
    mgmtDefinition (const mgmtDefinition_type& x);

    void
    mgmtDefinition (const mgmtDefinition_optional& x);

    void
    mgmtDefinition (::std::unique_ptr< mgmtDefinition_type > p);

    // objectIDs
    //
    typedef ::onem2m::listOfURIs objectIDs_type;
    typedef ::xsd::cxx::tree::optional< objectIDs_type > objectIDs_optional;
    typedef ::xsd::cxx::tree::traits< objectIDs_type, char > objectIDs_traits;

    const objectIDs_optional&
    objectIDs () const;

    objectIDs_optional&
    objectIDs ();

    void
    objectIDs (const objectIDs_type& x);

    void
    objectIDs (const objectIDs_optional& x);

    void
    objectIDs (::std::unique_ptr< objectIDs_type > p);

    // objectPaths
    //
    typedef ::onem2m::listOfURIs objectPaths_type;
    typedef ::xsd::cxx::tree::optional< objectPaths_type > objectPaths_optional;
    typedef ::xsd::cxx::tree::traits< objectPaths_type, char > objectPaths_traits;

    const objectPaths_optional&
    objectPaths () const;

    objectPaths_optional&
    objectPaths ();

    void
    objectPaths (const objectPaths_type& x);

    void
    objectPaths (const objectPaths_optional& x);

    void
    objectPaths (::std::unique_ptr< objectPaths_type > p);

    // description
    //
    typedef ::xml_schema::string description_type;
    typedef ::xsd::cxx::tree::optional< description_type > description_optional;
    typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

    const description_optional&
    description () const;

    description_optional&
    description ();

    void
    description (const description_type& x);

    void
    description (const description_optional& x);

    void
    description (::std::unique_ptr< description_type > p);

    // Constructors.
    //
    mgmtResource ();

    mgmtResource (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    mgmtResource (const mgmtResource& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual mgmtResource*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    mgmtResource&
    operator= (const mgmtResource& x);

    virtual 
    ~mgmtResource ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    mgmtDefinition_optional mgmtDefinition_;
    objectIDs_optional objectIDs_;
    objectPaths_optional objectPaths_;
    description_optional description_;
  };

  class announcedMgmtResource: public ::onem2m::announcedResource
  {
    public:
    // mgmtDefinition
    //
    typedef ::onem2m::mgmtDefinition mgmtDefinition_type;
    typedef ::xsd::cxx::tree::optional< mgmtDefinition_type > mgmtDefinition_optional;
    typedef ::xsd::cxx::tree::traits< mgmtDefinition_type, char > mgmtDefinition_traits;

    const mgmtDefinition_optional&
    mgmtDefinition () const;

    mgmtDefinition_optional&
    mgmtDefinition ();

    void
    mgmtDefinition (const mgmtDefinition_type& x);

    void
    mgmtDefinition (const mgmtDefinition_optional& x);

    void
    mgmtDefinition (::std::unique_ptr< mgmtDefinition_type > p);

    // objectIDs
    //
    typedef ::onem2m::listOfURIs objectIDs_type;
    typedef ::xsd::cxx::tree::optional< objectIDs_type > objectIDs_optional;
    typedef ::xsd::cxx::tree::traits< objectIDs_type, char > objectIDs_traits;

    const objectIDs_optional&
    objectIDs () const;

    objectIDs_optional&
    objectIDs ();

    void
    objectIDs (const objectIDs_type& x);

    void
    objectIDs (const objectIDs_optional& x);

    void
    objectIDs (::std::unique_ptr< objectIDs_type > p);

    // objectPaths
    //
    typedef ::onem2m::listOfURIs objectPaths_type;
    typedef ::xsd::cxx::tree::optional< objectPaths_type > objectPaths_optional;
    typedef ::xsd::cxx::tree::traits< objectPaths_type, char > objectPaths_traits;

    const objectPaths_optional&
    objectPaths () const;

    objectPaths_optional&
    objectPaths ();

    void
    objectPaths (const objectPaths_type& x);

    void
    objectPaths (const objectPaths_optional& x);

    void
    objectPaths (::std::unique_ptr< objectPaths_type > p);

    // description
    //
    typedef ::xml_schema::string description_type;
    typedef ::xsd::cxx::tree::optional< description_type > description_optional;
    typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

    const description_optional&
    description () const;

    description_optional&
    description ();

    void
    description (const description_type& x);

    void
    description (const description_optional& x);

    void
    description (::std::unique_ptr< description_type > p);

    // Constructors.
    //
    announcedMgmtResource ();

    announcedMgmtResource (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    announcedMgmtResource (const announcedMgmtResource& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual announcedMgmtResource*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    announcedMgmtResource&
    operator= (const announcedMgmtResource& x);

    virtual 
    ~announcedMgmtResource ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    mgmtDefinition_optional mgmtDefinition_;
    objectIDs_optional objectIDs_;
    objectPaths_optional objectPaths_;
    description_optional description_;
  };

  class listOfNCNames_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::ncname, char >
  {
    public:
    listOfNCNames_base ();

    listOfNCNames_base (size_type n, const ::xml_schema::ncname& x);

    template < typename I >
    listOfNCNames_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::ncname, char > (begin, end, this)
    {
    }

    listOfNCNames_base (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    listOfNCNames_base (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    listOfNCNames_base (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    listOfNCNames_base (const listOfNCNames_base& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual listOfNCNames_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~listOfNCNames_base ();
  };

  class listOfNCNames: public ::onem2m::listOfNCNames_base
  {
    public:
    // Constructors.
    //
    listOfNCNames ();

    listOfNCNames (const ::onem2m::listOfNCNames_base&);

    listOfNCNames (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    listOfNCNames (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    listOfNCNames (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    listOfNCNames (const listOfNCNames& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual listOfNCNames*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~listOfNCNames ();
  };

  class absRelTimestamp_member: public ::onem2m::timestamp
  {
    public:
    // Constructors.
    //
    absRelTimestamp_member ();

    absRelTimestamp_member (const char*);

    absRelTimestamp_member (const ::std::string&);

    absRelTimestamp_member (const ::xml_schema::string&);

    absRelTimestamp_member (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    absRelTimestamp_member (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    absRelTimestamp_member (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    absRelTimestamp_member (const absRelTimestamp_member& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual absRelTimestamp_member*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~absRelTimestamp_member ();
  };

  class absRelTimestamp_member1: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::long_, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    absRelTimestamp_member1 (const ::xml_schema::long_&);

    absRelTimestamp_member1 (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    absRelTimestamp_member1 (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    absRelTimestamp_member1 (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    absRelTimestamp_member1 (const absRelTimestamp_member1& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual absRelTimestamp_member1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~absRelTimestamp_member1 ();
  };

  class missingDataList_member: public ::onem2m::listOfTimeStamp
  {
    public:
    // Constructors.
    //
    missingDataList_member ();

    missingDataList_member (const ::onem2m::listOfTimeStamp_base&);

    missingDataList_member (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    missingDataList_member (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    missingDataList_member (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    missingDataList_member (const missingDataList_member& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual missingDataList_member*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~missingDataList_member ();
  };

  class missingDataList_member1: public ::onem2m::listOfRelTimeStamp
  {
    public:
    // Constructors.
    //
    missingDataList_member1 ();

    missingDataList_member1 (const ::onem2m::listOfRelTimeStamp_base&);

    missingDataList_member1 (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    missingDataList_member1 (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    missingDataList_member1 (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    missingDataList_member1 (const missingDataList_member1& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual missingDataList_member1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~missingDataList_member1 ();
  };

  class dynAuthJWT_member: public ::onem2m::e2eCompactJWS
  {
    public:
    // Constructors.
    //
    dynAuthJWT_member ();

    dynAuthJWT_member (const char*);

    dynAuthJWT_member (const ::std::string&);

    dynAuthJWT_member (const ::xml_schema::string&);

    dynAuthJWT_member (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    dynAuthJWT_member (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    dynAuthJWT_member (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    dynAuthJWT_member (const dynAuthJWT_member& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual dynAuthJWT_member*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~dynAuthJWT_member ();
  };

  class dynAuthJWT_member1: public ::onem2m::e2eCompactJWE
  {
    public:
    // Constructors.
    //
    dynAuthJWT_member1 ();

    dynAuthJWT_member1 (const char*);

    dynAuthJWT_member1 (const ::std::string&);

    dynAuthJWT_member1 (const ::xml_schema::string&);

    dynAuthJWT_member1 (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    dynAuthJWT_member1 (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    dynAuthJWT_member1 (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    dynAuthJWT_member1 (const dynAuthJWT_member1& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual dynAuthJWT_member1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~dynAuthJWT_member1 ();
  };

  class notificationURI_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::uri, char >
  {
    public:
    notificationURI_base ();

    notificationURI_base (size_type n, const ::xml_schema::uri& x);

    template < typename I >
    notificationURI_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::uri, char > (begin, end, this)
    {
    }

    notificationURI_base (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    notificationURI_base (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    notificationURI_base (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    notificationURI_base (const notificationURI_base& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual notificationURI_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~notificationURI_base ();
  };

  class notificationURI: public ::onem2m::notificationURI_base
  {
    public:
    // Constructors.
    //
    notificationURI ();

    notificationURI (const ::onem2m::notificationURI_base&);

    notificationURI (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    notificationURI (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    notificationURI (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    notificationURI (const notificationURI& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual notificationURI*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~notificationURI ();
  };

  class URIReference: public ::xml_schema::type
  {
    public:
    // name
    //
    typedef ::xml_schema::ncname name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::unique_ptr< name_type > p);

    // URI
    //
    typedef ::xml_schema::uri URI_type;
    typedef ::xsd::cxx::tree::traits< URI_type, char > URI_traits;

    const URI_type&
    URI () const;

    URI_type&
    URI ();

    void
    URI (const URI_type& x);

    void
    URI (::std::unique_ptr< URI_type > p);

    // Constructors.
    //
    URIReference (const name_type&,
                  const URI_type&);

    URIReference (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    URIReference (const URIReference& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual URIReference*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    URIReference&
    operator= (const URIReference& x);

    virtual 
    ~URIReference ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< URI_type > URI_;
  };

  class countryCode1_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::onem2m::countryCode, char >
  {
    public:
    countryCode1_base ();

    countryCode1_base (size_type n, const ::onem2m::countryCode& x);

    template < typename I >
    countryCode1_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::onem2m::countryCode, char > (begin, end, this)
    {
    }

    countryCode1_base (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    countryCode1_base (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    countryCode1_base (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    countryCode1_base (const countryCode1_base& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual countryCode1_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~countryCode1_base ();
  };

  class countryCode1: public ::onem2m::countryCode1_base
  {
    public:
    // Constructors.
    //
    countryCode1 ();

    countryCode1 (const ::onem2m::countryCode1_base&);

    countryCode1 (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    countryCode1 (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    countryCode1 (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    countryCode1 (const countryCode1& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual countryCode1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~countryCode1 ();
  };

  class circRegion_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::float_, char >
  {
    public:
    circRegion_base ();

    circRegion_base (size_type n, const ::xml_schema::float_& x);

    template < typename I >
    circRegion_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::float_, char > (begin, end, this)
    {
    }

    circRegion_base (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    circRegion_base (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    circRegion_base (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    circRegion_base (const circRegion_base& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual circRegion_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~circRegion_base ();
  };

  class circRegion: public ::onem2m::circRegion_base
  {
    public:
    // Constructors.
    //
    circRegion ();

    circRegion (const ::onem2m::circRegion_base&);

    circRegion (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    circRegion (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    circRegion (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    circRegion (const circRegion& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual circRegion*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~circRegion ();
  };

  class announcedAttribute_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::ncname, char >
  {
    public:
    announcedAttribute_base ();

    announcedAttribute_base (size_type n, const ::xml_schema::ncname& x);

    template < typename I >
    announcedAttribute_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::ncname, char > (begin, end, this)
    {
    }

    announcedAttribute_base (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    announcedAttribute_base (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    announcedAttribute_base (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    announcedAttribute_base (const announcedAttribute_base& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual announcedAttribute_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~announcedAttribute_base ();
  };

  class announcedAttribute: public ::onem2m::announcedAttribute_base
  {
    public:
    // Constructors.
    //
    announcedAttribute ();

    announcedAttribute (const ::onem2m::announcedAttribute_base&);

    announcedAttribute (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    announcedAttribute (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    announcedAttribute (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    announcedAttribute (const announcedAttribute& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual announcedAttribute*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~announcedAttribute ();
  };

  class announcedAttribute1_base: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::ncname, char >
  {
    public:
    announcedAttribute1_base ();

    announcedAttribute1_base (size_type n, const ::xml_schema::ncname& x);

    template < typename I >
    announcedAttribute1_base (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::ncname, char > (begin, end, this)
    {
    }

    announcedAttribute1_base (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    announcedAttribute1_base (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    announcedAttribute1_base (const ::std::string& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    announcedAttribute1_base (const announcedAttribute1_base& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    virtual announcedAttribute1_base*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~announcedAttribute1_base ();
  };

  class announcedAttribute1: public ::onem2m::announcedAttribute1_base
  {
    public:
    // Constructors.
    //
    announcedAttribute1 ();

    announcedAttribute1 (const ::onem2m::announcedAttribute1_base&);

    announcedAttribute1 (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    announcedAttribute1 (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    announcedAttribute1 (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    announcedAttribute1 (const announcedAttribute1& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual announcedAttribute1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~announcedAttribute1 ();
  };
}

#include <iosfwd>

namespace onem2m
{
  ::std::ostream&
  operator<< (::std::ostream&, const ID&);

  ::std::ostream&
  operator<< (::std::ostream&, const nodeID&);

  ::std::ostream&
  operator<< (::std::ostream&, const deviceID&);

  ::std::ostream&
  operator<< (::std::ostream&, const externalID&);

  ::std::ostream&
  operator<< (::std::ostream&, const requestID&);

  ::std::ostream&
  operator<< (::std::ostream&, const roleID&);

  ::std::ostream&
  operator<< (::std::ostream&, const tokenID&);

  ::std::ostream&
  operator<< (::std::ostream&, const nhURI&);

  ::std::ostream&
  operator<< (::std::ostream&, const acpType_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const acpType&);

  ::std::ostream&
  operator<< (::std::ostream&, const labels_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const labels&);

  ::std::ostream&
  operator<< (::std::ostream&, const triggerRecipientID&);

  ::std::ostream&
  operator<< (::std::ostream&, const listOfM2MID_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const listOfM2MID&);

  ::std::ostream&
  operator<< (::std::ostream&, const longMin_1&);

  ::std::ostream&
  operator<< (::std::ostream&, const listOfMinMax_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const listOfMinMax&);

  ::std::ostream&
  operator<< (::std::ostream&, const signatureList_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const signatureList&);

  ::std::ostream&
  operator<< (::std::ostream&, const base64url&);

  ::std::ostream&
  operator<< (::std::ostream&, const ipv4&);

  ::std::ostream&
  operator<< (::std::ostream&, const ipv6&);

  ::std::ostream&
  operator<< (::std::ostream&, const poaList_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const poaList&);

  ::std::ostream&
  operator<< (::std::ostream&, const timestamp&);

  ::std::ostream&
  operator<< (::std::ostream&, const absRelTimestamp&);

  ::std::ostream&
  operator<< (::std::ostream&, const missingDataList&);

  ::std::ostream&
  operator<< (::std::ostream&, const listOfTimeStamp_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const listOfTimeStamp&);

  ::std::ostream&
  operator<< (::std::ostream&, const listOfRelTimeStamp_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const listOfRelTimeStamp&);

  ::std::ostream&
  operator<< (::std::ostream&, const typeOfContent&);

  ::std::ostream&
  operator<< (::std::ostream&, permittedMediaTypes::value);

  ::std::ostream&
  operator<< (::std::ostream&, const permittedMediaTypes&);

  ::std::ostream&
  operator<< (::std::ostream&, const serializations_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const serializations&);

  ::std::ostream&
  operator<< (::std::ostream&, const contentInfo&);

  ::std::ostream&
  operator<< (::std::ostream&, const scheduleEntry&);

  ::std::ostream&
  operator<< (::std::ostream&, const listOfURIs_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const listOfURIs&);

  ::std::ostream&
  operator<< (::std::ostream&, const listOfDuration&);

  ::std::ostream&
  operator<< (::std::ostream&, const attributeList&);

  ::std::ostream&
  operator<< (::std::ostream&, const resourceTypeList_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const resourceTypeList&);

  ::std::ostream&
  operator<< (::std::ostream&, const sparql&);

  ::std::ostream&
  operator<< (::std::ostream&, const descriptorRepresentation&);

  ::std::ostream&
  operator<< (::std::ostream&, const e2eCompactJWS&);

  ::std::ostream&
  operator<< (::std::ostream&, const e2eCompactJWE&);

  ::std::ostream&
  operator<< (::std::ostream&, const dynAuthJWT&);

  ::std::ostream&
  operator<< (::std::ostream&, const resourceName&);

  ::std::ostream&
  operator<< (::std::ostream&, const primitiveContentBase&);

  ::std::ostream&
  operator<< (::std::ostream&, const filterCriteria&);

  ::std::ostream&
  operator<< (::std::ostream&, const attribute&);

  ::std::ostream&
  operator<< (::std::ostream&, const scheduleEntries&);

  ::std::ostream&
  operator<< (::std::ostream&, const childResourceRef&);

  ::std::ostream&
  operator<< (::std::ostream&, const responseTypeInfo&);

  ::std::ostream&
  operator<< (::std::ostream&, const contentRef&);

  ::std::ostream&
  operator<< (::std::ostream&, const deletionContexts&);

  ::std::ostream&
  operator<< (::std::ostream&, const locationRegion&);

  ::std::ostream&
  operator<< (::std::ostream&, const countryCode&);

  ::std::ostream&
  operator<< (::std::ostream&, const missingData&);

  ::std::ostream&
  operator<< (::std::ostream&, const dataLink&);

  ::std::ostream&
  operator<< (::std::ostream&, const resource&);

  ::std::ostream&
  operator<< (::std::ostream&, const regularResource&);

  ::std::ostream&
  operator<< (::std::ostream&, const announceableResource&);

  ::std::ostream&
  operator<< (::std::ostream&, const announcedResource&);

  ::std::ostream&
  operator<< (::std::ostream&, const announceableSubordinateResource&);

  ::std::ostream&
  operator<< (::std::ostream&, const subordinateResource&);

  ::std::ostream&
  operator<< (::std::ostream&, const announcedSubordinateResource&);

  ::std::ostream&
  operator<< (::std::ostream&, const mgmtResource&);

  ::std::ostream&
  operator<< (::std::ostream&, const announcedMgmtResource&);

  ::std::ostream&
  operator<< (::std::ostream&, const listOfNCNames_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const listOfNCNames&);

  ::std::ostream&
  operator<< (::std::ostream&, const absRelTimestamp_member&);

  ::std::ostream&
  operator<< (::std::ostream&, const absRelTimestamp_member1&);

  ::std::ostream&
  operator<< (::std::ostream&, const missingDataList_member&);

  ::std::ostream&
  operator<< (::std::ostream&, const missingDataList_member1&);

  ::std::ostream&
  operator<< (::std::ostream&, const dynAuthJWT_member&);

  ::std::ostream&
  operator<< (::std::ostream&, const dynAuthJWT_member1&);

  ::std::ostream&
  operator<< (::std::ostream&, const notificationURI_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const notificationURI&);

  ::std::ostream&
  operator<< (::std::ostream&, const URIReference&);

  ::std::ostream&
  operator<< (::std::ostream&, const countryCode1_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const countryCode1&);

  ::std::ostream&
  operator<< (::std::ostream&, const circRegion_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const circRegion&);

  ::std::ostream&
  operator<< (::std::ostream&, const announcedAttribute_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const announcedAttribute&);

  ::std::ostream&
  operator<< (::std::ostream&, const announcedAttribute1_base&);

  ::std::ostream&
  operator<< (::std::ostream&, const announcedAttribute1&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace onem2m
{
  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::onem2m::resource >
  sg_resource (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::resource >
  sg_resource (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::resource >
  sg_resource (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::onem2m::resource >
  sg_resource (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::resource >
  sg_resource (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::resource >
  sg_resource (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::resource >
  sg_resource (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::resource >
  sg_resource (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::resource >
  sg_resource (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::onem2m::resource >
  sg_resource (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::resource >
  sg_resource (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::resource >
  sg_resource (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::onem2m::resource >
  sg_resource (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::resource >
  sg_resource (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::onem2m::regularResource >
  sg_regularResource (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::regularResource >
  sg_regularResource (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::regularResource >
  sg_regularResource (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::onem2m::regularResource >
  sg_regularResource (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::regularResource >
  sg_regularResource (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::regularResource >
  sg_regularResource (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::regularResource >
  sg_regularResource (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::regularResource >
  sg_regularResource (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::regularResource >
  sg_regularResource (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::onem2m::regularResource >
  sg_regularResource (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::regularResource >
  sg_regularResource (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::regularResource >
  sg_regularResource (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::onem2m::regularResource >
  sg_regularResource (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::regularResource >
  sg_regularResource (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::onem2m::announcedResource >
  sg_announcedResource (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedResource >
  sg_announcedResource (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedResource >
  sg_announcedResource (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::onem2m::announcedResource >
  sg_announcedResource (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedResource >
  sg_announcedResource (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedResource >
  sg_announcedResource (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedResource >
  sg_announcedResource (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedResource >
  sg_announcedResource (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedResource >
  sg_announcedResource (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::onem2m::announcedResource >
  sg_announcedResource (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedResource >
  sg_announcedResource (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedResource >
  sg_announcedResource (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::onem2m::announcedResource >
  sg_announcedResource (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedResource >
  sg_announcedResource (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::onem2m::announceableResource >
  sg_announceableResource (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableResource >
  sg_announceableResource (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableResource >
  sg_announceableResource (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::onem2m::announceableResource >
  sg_announceableResource (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableResource >
  sg_announceableResource (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableResource >
  sg_announceableResource (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableResource >
  sg_announceableResource (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableResource >
  sg_announceableResource (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableResource >
  sg_announceableResource (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::onem2m::announceableResource >
  sg_announceableResource (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableResource >
  sg_announceableResource (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableResource >
  sg_announceableResource (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::onem2m::announceableResource >
  sg_announceableResource (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableResource >
  sg_announceableResource (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::onem2m::subordinateResource >
  sg_subordinateResource (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::subordinateResource >
  sg_subordinateResource (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::subordinateResource >
  sg_subordinateResource (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::onem2m::subordinateResource >
  sg_subordinateResource (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::subordinateResource >
  sg_subordinateResource (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::subordinateResource >
  sg_subordinateResource (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::subordinateResource >
  sg_subordinateResource (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::subordinateResource >
  sg_subordinateResource (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::subordinateResource >
  sg_subordinateResource (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::onem2m::subordinateResource >
  sg_subordinateResource (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::subordinateResource >
  sg_subordinateResource (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::subordinateResource >
  sg_subordinateResource (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::onem2m::subordinateResource >
  sg_subordinateResource (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::subordinateResource >
  sg_subordinateResource (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::onem2m::announceableSubordinateResource >
  sg_announceableSubordinateResource (const ::std::string& uri,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableSubordinateResource >
  sg_announceableSubordinateResource (const ::std::string& uri,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableSubordinateResource >
  sg_announceableSubordinateResource (const ::std::string& uri,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::onem2m::announceableSubordinateResource >
  sg_announceableSubordinateResource (::std::istream& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableSubordinateResource >
  sg_announceableSubordinateResource (::std::istream& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableSubordinateResource >
  sg_announceableSubordinateResource (::std::istream& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableSubordinateResource >
  sg_announceableSubordinateResource (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableSubordinateResource >
  sg_announceableSubordinateResource (::std::istream& is,
                                      const ::std::string& id,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableSubordinateResource >
  sg_announceableSubordinateResource (::std::istream& is,
                                      const ::std::string& id,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::onem2m::announceableSubordinateResource >
  sg_announceableSubordinateResource (::xercesc::InputSource& is,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableSubordinateResource >
  sg_announceableSubordinateResource (::xercesc::InputSource& is,
                                      ::xml_schema::error_handler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableSubordinateResource >
  sg_announceableSubordinateResource (::xercesc::InputSource& is,
                                      ::xercesc::DOMErrorHandler& eh,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::onem2m::announceableSubordinateResource >
  sg_announceableSubordinateResource (const ::xercesc::DOMDocument& d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announceableSubordinateResource >
  sg_announceableSubordinateResource (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                      ::xml_schema::flags f = 0,
                                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::onem2m::announcedSubordinateResource >
  sg_announcedSubordinateResource (const ::std::string& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedSubordinateResource >
  sg_announcedSubordinateResource (const ::std::string& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedSubordinateResource >
  sg_announcedSubordinateResource (const ::std::string& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::onem2m::announcedSubordinateResource >
  sg_announcedSubordinateResource (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedSubordinateResource >
  sg_announcedSubordinateResource (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedSubordinateResource >
  sg_announcedSubordinateResource (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedSubordinateResource >
  sg_announcedSubordinateResource (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedSubordinateResource >
  sg_announcedSubordinateResource (::std::istream& is,
                                   const ::std::string& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedSubordinateResource >
  sg_announcedSubordinateResource (::std::istream& is,
                                   const ::std::string& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::onem2m::announcedSubordinateResource >
  sg_announcedSubordinateResource (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedSubordinateResource >
  sg_announcedSubordinateResource (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedSubordinateResource >
  sg_announcedSubordinateResource (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::onem2m::announcedSubordinateResource >
  sg_announcedSubordinateResource (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedSubordinateResource >
  sg_announcedSubordinateResource (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::onem2m::mgmtResource >
  sg_mgmtResource (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::mgmtResource >
  sg_mgmtResource (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::mgmtResource >
  sg_mgmtResource (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::onem2m::mgmtResource >
  sg_mgmtResource (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::mgmtResource >
  sg_mgmtResource (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::mgmtResource >
  sg_mgmtResource (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::mgmtResource >
  sg_mgmtResource (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::mgmtResource >
  sg_mgmtResource (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::mgmtResource >
  sg_mgmtResource (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::onem2m::mgmtResource >
  sg_mgmtResource (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::mgmtResource >
  sg_mgmtResource (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::mgmtResource >
  sg_mgmtResource (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::onem2m::mgmtResource >
  sg_mgmtResource (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::mgmtResource >
  sg_mgmtResource (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::onem2m::announcedMgmtResource >
  sg_announcedMgmtResource (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedMgmtResource >
  sg_announcedMgmtResource (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedMgmtResource >
  sg_announcedMgmtResource (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::onem2m::announcedMgmtResource >
  sg_announcedMgmtResource (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedMgmtResource >
  sg_announcedMgmtResource (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedMgmtResource >
  sg_announcedMgmtResource (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedMgmtResource >
  sg_announcedMgmtResource (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedMgmtResource >
  sg_announcedMgmtResource (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedMgmtResource >
  sg_announcedMgmtResource (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::onem2m::announcedMgmtResource >
  sg_announcedMgmtResource (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedMgmtResource >
  sg_announcedMgmtResource (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedMgmtResource >
  sg_announcedMgmtResource (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::onem2m::announcedMgmtResource >
  sg_announcedMgmtResource (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::announcedMgmtResource >
  sg_announcedMgmtResource (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::unique_ptr< ::onem2m::primitiveContent >
  primitiveContent_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::primitiveContent >
  primitiveContent_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::primitiveContent >
  primitiveContent_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::unique_ptr< ::onem2m::primitiveContent >
  primitiveContent_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::primitiveContent >
  primitiveContent_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::primitiveContent >
  primitiveContent_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::primitiveContent >
  primitiveContent_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::primitiveContent >
  primitiveContent_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::primitiveContent >
  primitiveContent_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::unique_ptr< ::onem2m::primitiveContent >
  primitiveContent_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::primitiveContent >
  primitiveContent_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::primitiveContent >
  primitiveContent_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::unique_ptr< ::onem2m::primitiveContent >
  primitiveContent_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::unique_ptr< ::onem2m::primitiveContent >
  primitiveContent_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace onem2m
{
  void
  operator<< (::xercesc::DOMElement&, const ID&);

  void
  operator<< (::xercesc::DOMAttr&, const ID&);

  void
  operator<< (::xml_schema::list_stream&,
              const ID&);

  void
  operator<< (::xercesc::DOMElement&, const nodeID&);

  void
  operator<< (::xercesc::DOMAttr&, const nodeID&);

  void
  operator<< (::xml_schema::list_stream&,
              const nodeID&);

  void
  operator<< (::xercesc::DOMElement&, const deviceID&);

  void
  operator<< (::xercesc::DOMAttr&, const deviceID&);

  void
  operator<< (::xml_schema::list_stream&,
              const deviceID&);

  void
  operator<< (::xercesc::DOMElement&, const externalID&);

  void
  operator<< (::xercesc::DOMAttr&, const externalID&);

  void
  operator<< (::xml_schema::list_stream&,
              const externalID&);

  void
  operator<< (::xercesc::DOMElement&, const requestID&);

  void
  operator<< (::xercesc::DOMAttr&, const requestID&);

  void
  operator<< (::xml_schema::list_stream&,
              const requestID&);

  void
  operator<< (::xercesc::DOMElement&, const roleID&);

  void
  operator<< (::xercesc::DOMAttr&, const roleID&);

  void
  operator<< (::xml_schema::list_stream&,
              const roleID&);

  void
  operator<< (::xercesc::DOMElement&, const tokenID&);

  void
  operator<< (::xercesc::DOMAttr&, const tokenID&);

  void
  operator<< (::xml_schema::list_stream&,
              const tokenID&);

  void
  operator<< (::xercesc::DOMElement&, const nhURI&);

  void
  operator<< (::xercesc::DOMAttr&, const nhURI&);

  void
  operator<< (::xml_schema::list_stream&,
              const nhURI&);

  void
  operator<< (::xercesc::DOMElement&, const acpType_base&);

  void
  operator<< (::xercesc::DOMAttr&, const acpType_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const acpType_base&);

  void
  operator<< (::xercesc::DOMElement&, const acpType&);

  void
  operator<< (::xercesc::DOMAttr&, const acpType&);

  void
  operator<< (::xml_schema::list_stream&,
              const acpType&);

  void
  operator<< (::xercesc::DOMElement&, const labels_base&);

  void
  operator<< (::xercesc::DOMAttr&, const labels_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const labels_base&);

  void
  operator<< (::xercesc::DOMElement&, const labels&);

  void
  operator<< (::xercesc::DOMAttr&, const labels&);

  void
  operator<< (::xml_schema::list_stream&,
              const labels&);

  void
  operator<< (::xercesc::DOMElement&, const triggerRecipientID&);

  void
  operator<< (::xercesc::DOMAttr&, const triggerRecipientID&);

  void
  operator<< (::xml_schema::list_stream&,
              const triggerRecipientID&);

  void
  operator<< (::xercesc::DOMElement&, const listOfM2MID_base&);

  void
  operator<< (::xercesc::DOMAttr&, const listOfM2MID_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const listOfM2MID_base&);

  void
  operator<< (::xercesc::DOMElement&, const listOfM2MID&);

  void
  operator<< (::xercesc::DOMAttr&, const listOfM2MID&);

  void
  operator<< (::xml_schema::list_stream&,
              const listOfM2MID&);

  void
  operator<< (::xercesc::DOMElement&, const longMin_1&);

  void
  operator<< (::xercesc::DOMAttr&, const longMin_1&);

  void
  operator<< (::xml_schema::list_stream&,
              const longMin_1&);

  void
  operator<< (::xercesc::DOMElement&, const listOfMinMax_base&);

  void
  operator<< (::xercesc::DOMAttr&, const listOfMinMax_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const listOfMinMax_base&);

  void
  operator<< (::xercesc::DOMElement&, const listOfMinMax&);

  void
  operator<< (::xercesc::DOMAttr&, const listOfMinMax&);

  void
  operator<< (::xml_schema::list_stream&,
              const listOfMinMax&);

  void
  operator<< (::xercesc::DOMElement&, const signatureList_base&);

  void
  operator<< (::xercesc::DOMAttr&, const signatureList_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const signatureList_base&);

  void
  operator<< (::xercesc::DOMElement&, const signatureList&);

  void
  operator<< (::xercesc::DOMAttr&, const signatureList&);

  void
  operator<< (::xml_schema::list_stream&,
              const signatureList&);

  void
  operator<< (::xercesc::DOMElement&, const base64url&);

  void
  operator<< (::xercesc::DOMAttr&, const base64url&);

  void
  operator<< (::xml_schema::list_stream&,
              const base64url&);

  void
  operator<< (::xercesc::DOMElement&, const ipv4&);

  void
  operator<< (::xercesc::DOMAttr&, const ipv4&);

  void
  operator<< (::xml_schema::list_stream&,
              const ipv4&);

  void
  operator<< (::xercesc::DOMElement&, const ipv6&);

  void
  operator<< (::xercesc::DOMAttr&, const ipv6&);

  void
  operator<< (::xml_schema::list_stream&,
              const ipv6&);

  void
  operator<< (::xercesc::DOMElement&, const poaList_base&);

  void
  operator<< (::xercesc::DOMAttr&, const poaList_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const poaList_base&);

  void
  operator<< (::xercesc::DOMElement&, const poaList&);

  void
  operator<< (::xercesc::DOMAttr&, const poaList&);

  void
  operator<< (::xml_schema::list_stream&,
              const poaList&);

  void
  operator<< (::xercesc::DOMElement&, const timestamp&);

  void
  operator<< (::xercesc::DOMAttr&, const timestamp&);

  void
  operator<< (::xml_schema::list_stream&,
              const timestamp&);

  void
  operator<< (::xercesc::DOMElement&, const absRelTimestamp&);

  void
  operator<< (::xercesc::DOMAttr&, const absRelTimestamp&);

  void
  operator<< (::xml_schema::list_stream&,
              const absRelTimestamp&);

  void
  operator<< (::xercesc::DOMElement&, const missingDataList&);

  void
  operator<< (::xercesc::DOMAttr&, const missingDataList&);

  void
  operator<< (::xml_schema::list_stream&,
              const missingDataList&);

  void
  operator<< (::xercesc::DOMElement&, const listOfTimeStamp_base&);

  void
  operator<< (::xercesc::DOMAttr&, const listOfTimeStamp_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const listOfTimeStamp_base&);

  void
  operator<< (::xercesc::DOMElement&, const listOfTimeStamp&);

  void
  operator<< (::xercesc::DOMAttr&, const listOfTimeStamp&);

  void
  operator<< (::xml_schema::list_stream&,
              const listOfTimeStamp&);

  void
  operator<< (::xercesc::DOMElement&, const listOfRelTimeStamp_base&);

  void
  operator<< (::xercesc::DOMAttr&, const listOfRelTimeStamp_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const listOfRelTimeStamp_base&);

  void
  operator<< (::xercesc::DOMElement&, const listOfRelTimeStamp&);

  void
  operator<< (::xercesc::DOMAttr&, const listOfRelTimeStamp&);

  void
  operator<< (::xml_schema::list_stream&,
              const listOfRelTimeStamp&);

  void
  operator<< (::xercesc::DOMElement&, const typeOfContent&);

  void
  operator<< (::xercesc::DOMAttr&, const typeOfContent&);

  void
  operator<< (::xml_schema::list_stream&,
              const typeOfContent&);

  void
  operator<< (::xercesc::DOMElement&, const permittedMediaTypes&);

  void
  operator<< (::xercesc::DOMAttr&, const permittedMediaTypes&);

  void
  operator<< (::xml_schema::list_stream&,
              const permittedMediaTypes&);

  void
  operator<< (::xercesc::DOMElement&, const serializations_base&);

  void
  operator<< (::xercesc::DOMAttr&, const serializations_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const serializations_base&);

  void
  operator<< (::xercesc::DOMElement&, const serializations&);

  void
  operator<< (::xercesc::DOMAttr&, const serializations&);

  void
  operator<< (::xml_schema::list_stream&,
              const serializations&);

  void
  operator<< (::xercesc::DOMElement&, const contentInfo&);

  void
  operator<< (::xercesc::DOMAttr&, const contentInfo&);

  void
  operator<< (::xml_schema::list_stream&,
              const contentInfo&);

  void
  operator<< (::xercesc::DOMElement&, const scheduleEntry&);

  void
  operator<< (::xercesc::DOMAttr&, const scheduleEntry&);

  void
  operator<< (::xml_schema::list_stream&,
              const scheduleEntry&);

  void
  operator<< (::xercesc::DOMElement&, const listOfURIs_base&);

  void
  operator<< (::xercesc::DOMAttr&, const listOfURIs_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const listOfURIs_base&);

  void
  operator<< (::xercesc::DOMElement&, const listOfURIs&);

  void
  operator<< (::xercesc::DOMAttr&, const listOfURIs&);

  void
  operator<< (::xml_schema::list_stream&,
              const listOfURIs&);

  void
  operator<< (::xercesc::DOMElement&, const listOfDuration&);

  void
  operator<< (::xercesc::DOMAttr&, const listOfDuration&);

  void
  operator<< (::xml_schema::list_stream&,
              const listOfDuration&);

  void
  operator<< (::xercesc::DOMElement&, const attributeList&);

  void
  operator<< (::xercesc::DOMAttr&, const attributeList&);

  void
  operator<< (::xml_schema::list_stream&,
              const attributeList&);

  void
  operator<< (::xercesc::DOMElement&, const resourceTypeList_base&);

  void
  operator<< (::xercesc::DOMAttr&, const resourceTypeList_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const resourceTypeList_base&);

  void
  operator<< (::xercesc::DOMElement&, const resourceTypeList&);

  void
  operator<< (::xercesc::DOMAttr&, const resourceTypeList&);

  void
  operator<< (::xml_schema::list_stream&,
              const resourceTypeList&);

  void
  operator<< (::xercesc::DOMElement&, const sparql&);

  void
  operator<< (::xercesc::DOMAttr&, const sparql&);

  void
  operator<< (::xml_schema::list_stream&,
              const sparql&);

  void
  operator<< (::xercesc::DOMElement&, const descriptorRepresentation&);

  void
  operator<< (::xercesc::DOMAttr&, const descriptorRepresentation&);

  void
  operator<< (::xml_schema::list_stream&,
              const descriptorRepresentation&);

  void
  operator<< (::xercesc::DOMElement&, const e2eCompactJWS&);

  void
  operator<< (::xercesc::DOMAttr&, const e2eCompactJWS&);

  void
  operator<< (::xml_schema::list_stream&,
              const e2eCompactJWS&);

  void
  operator<< (::xercesc::DOMElement&, const e2eCompactJWE&);

  void
  operator<< (::xercesc::DOMAttr&, const e2eCompactJWE&);

  void
  operator<< (::xml_schema::list_stream&,
              const e2eCompactJWE&);

  void
  operator<< (::xercesc::DOMElement&, const dynAuthJWT&);

  void
  operator<< (::xercesc::DOMAttr&, const dynAuthJWT&);

  void
  operator<< (::xml_schema::list_stream&,
              const dynAuthJWT&);

  void
  operator<< (::xercesc::DOMElement&, const resourceName&);

  void
  operator<< (::xercesc::DOMAttr&, const resourceName&);

  void
  operator<< (::xml_schema::list_stream&,
              const resourceName&);

  void
  operator<< (::xercesc::DOMElement&, const primitiveContentBase&);

  void
  operator<< (::xercesc::DOMElement&, const filterCriteria&);

  void
  operator<< (::xercesc::DOMElement&, const attribute&);

  void
  operator<< (::xercesc::DOMElement&, const scheduleEntries&);

  void
  operator<< (::xercesc::DOMElement&, const childResourceRef&);

  void
  operator<< (::xercesc::DOMElement&, const responseTypeInfo&);

  void
  operator<< (::xercesc::DOMElement&, const contentRef&);

  void
  operator<< (::xercesc::DOMElement&, const deletionContexts&);

  void
  operator<< (::xercesc::DOMElement&, const locationRegion&);

  void
  operator<< (::xercesc::DOMElement&, const countryCode&);

  void
  operator<< (::xercesc::DOMAttr&, const countryCode&);

  void
  operator<< (::xml_schema::list_stream&,
              const countryCode&);

  void
  operator<< (::xercesc::DOMElement&, const missingData&);

  void
  operator<< (::xercesc::DOMElement&, const dataLink&);

  void
  operator<< (::xercesc::DOMElement&, const resource&);

  void
  operator<< (::xercesc::DOMElement&, const regularResource&);

  void
  operator<< (::xercesc::DOMElement&, const announceableResource&);

  void
  operator<< (::xercesc::DOMElement&, const announcedResource&);

  void
  operator<< (::xercesc::DOMElement&, const announceableSubordinateResource&);

  void
  operator<< (::xercesc::DOMElement&, const subordinateResource&);

  void
  operator<< (::xercesc::DOMElement&, const announcedSubordinateResource&);

  void
  operator<< (::xercesc::DOMElement&, const mgmtResource&);

  void
  operator<< (::xercesc::DOMElement&, const announcedMgmtResource&);

  void
  operator<< (::xercesc::DOMElement&, const listOfNCNames_base&);

  void
  operator<< (::xercesc::DOMAttr&, const listOfNCNames_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const listOfNCNames_base&);

  void
  operator<< (::xercesc::DOMElement&, const listOfNCNames&);

  void
  operator<< (::xercesc::DOMAttr&, const listOfNCNames&);

  void
  operator<< (::xml_schema::list_stream&,
              const listOfNCNames&);

  // Serialize to std::ostream.
  //

  void
  sg_resource (::std::ostream& os,
               const ::onem2m::resource& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  sg_resource (::std::ostream& os,
               const ::onem2m::resource& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  sg_resource (::std::ostream& os,
               const ::onem2m::resource& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  sg_resource (::xercesc::XMLFormatTarget& ft,
               const ::onem2m::resource& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  sg_resource (::xercesc::XMLFormatTarget& ft,
               const ::onem2m::resource& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  sg_resource (::xercesc::XMLFormatTarget& ft,
               const ::onem2m::resource& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  sg_resource (::xercesc::DOMDocument& d,
               const ::onem2m::resource& x,
               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  sg_resource (const ::onem2m::resource& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  sg_regularResource (::std::ostream& os,
                      const ::onem2m::regularResource& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  sg_regularResource (::std::ostream& os,
                      const ::onem2m::regularResource& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  sg_regularResource (::std::ostream& os,
                      const ::onem2m::regularResource& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  sg_regularResource (::xercesc::XMLFormatTarget& ft,
                      const ::onem2m::regularResource& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  sg_regularResource (::xercesc::XMLFormatTarget& ft,
                      const ::onem2m::regularResource& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  sg_regularResource (::xercesc::XMLFormatTarget& ft,
                      const ::onem2m::regularResource& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  sg_regularResource (::xercesc::DOMDocument& d,
                      const ::onem2m::regularResource& x,
                      ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  sg_regularResource (const ::onem2m::regularResource& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  sg_announcedResource (::std::ostream& os,
                        const ::onem2m::announcedResource& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  sg_announcedResource (::std::ostream& os,
                        const ::onem2m::announcedResource& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  sg_announcedResource (::std::ostream& os,
                        const ::onem2m::announcedResource& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  sg_announcedResource (::xercesc::XMLFormatTarget& ft,
                        const ::onem2m::announcedResource& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  sg_announcedResource (::xercesc::XMLFormatTarget& ft,
                        const ::onem2m::announcedResource& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  sg_announcedResource (::xercesc::XMLFormatTarget& ft,
                        const ::onem2m::announcedResource& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  sg_announcedResource (::xercesc::DOMDocument& d,
                        const ::onem2m::announcedResource& x,
                        ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  sg_announcedResource (const ::onem2m::announcedResource& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  sg_announceableResource (::std::ostream& os,
                           const ::onem2m::announceableResource& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  sg_announceableResource (::std::ostream& os,
                           const ::onem2m::announceableResource& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  sg_announceableResource (::std::ostream& os,
                           const ::onem2m::announceableResource& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  sg_announceableResource (::xercesc::XMLFormatTarget& ft,
                           const ::onem2m::announceableResource& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  sg_announceableResource (::xercesc::XMLFormatTarget& ft,
                           const ::onem2m::announceableResource& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  sg_announceableResource (::xercesc::XMLFormatTarget& ft,
                           const ::onem2m::announceableResource& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  sg_announceableResource (::xercesc::DOMDocument& d,
                           const ::onem2m::announceableResource& x,
                           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  sg_announceableResource (const ::onem2m::announceableResource& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  sg_subordinateResource (::std::ostream& os,
                          const ::onem2m::subordinateResource& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  sg_subordinateResource (::std::ostream& os,
                          const ::onem2m::subordinateResource& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  sg_subordinateResource (::std::ostream& os,
                          const ::onem2m::subordinateResource& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  sg_subordinateResource (::xercesc::XMLFormatTarget& ft,
                          const ::onem2m::subordinateResource& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  sg_subordinateResource (::xercesc::XMLFormatTarget& ft,
                          const ::onem2m::subordinateResource& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  sg_subordinateResource (::xercesc::XMLFormatTarget& ft,
                          const ::onem2m::subordinateResource& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  sg_subordinateResource (::xercesc::DOMDocument& d,
                          const ::onem2m::subordinateResource& x,
                          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  sg_subordinateResource (const ::onem2m::subordinateResource& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  sg_announceableSubordinateResource (::std::ostream& os,
                                      const ::onem2m::announceableSubordinateResource& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

  void
  sg_announceableSubordinateResource (::std::ostream& os,
                                      const ::onem2m::announceableSubordinateResource& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

  void
  sg_announceableSubordinateResource (::std::ostream& os,
                                      const ::onem2m::announceableSubordinateResource& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  sg_announceableSubordinateResource (::xercesc::XMLFormatTarget& ft,
                                      const ::onem2m::announceableSubordinateResource& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

  void
  sg_announceableSubordinateResource (::xercesc::XMLFormatTarget& ft,
                                      const ::onem2m::announceableSubordinateResource& x, 
                                      ::xml_schema::error_handler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

  void
  sg_announceableSubordinateResource (::xercesc::XMLFormatTarget& ft,
                                      const ::onem2m::announceableSubordinateResource& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  sg_announceableSubordinateResource (::xercesc::DOMDocument& d,
                                      const ::onem2m::announceableSubordinateResource& x,
                                      ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  sg_announceableSubordinateResource (const ::onem2m::announceableSubordinateResource& x, 
                                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                      ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  sg_announcedSubordinateResource (::std::ostream& os,
                                   const ::onem2m::announcedSubordinateResource& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

  void
  sg_announcedSubordinateResource (::std::ostream& os,
                                   const ::onem2m::announcedSubordinateResource& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

  void
  sg_announcedSubordinateResource (::std::ostream& os,
                                   const ::onem2m::announcedSubordinateResource& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  sg_announcedSubordinateResource (::xercesc::XMLFormatTarget& ft,
                                   const ::onem2m::announcedSubordinateResource& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

  void
  sg_announcedSubordinateResource (::xercesc::XMLFormatTarget& ft,
                                   const ::onem2m::announcedSubordinateResource& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

  void
  sg_announcedSubordinateResource (::xercesc::XMLFormatTarget& ft,
                                   const ::onem2m::announcedSubordinateResource& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::string& e = "UTF-8",
                                   ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  sg_announcedSubordinateResource (::xercesc::DOMDocument& d,
                                   const ::onem2m::announcedSubordinateResource& x,
                                   ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  sg_announcedSubordinateResource (const ::onem2m::announcedSubordinateResource& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  sg_mgmtResource (::std::ostream& os,
                   const ::onem2m::mgmtResource& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  sg_mgmtResource (::std::ostream& os,
                   const ::onem2m::mgmtResource& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  sg_mgmtResource (::std::ostream& os,
                   const ::onem2m::mgmtResource& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  sg_mgmtResource (::xercesc::XMLFormatTarget& ft,
                   const ::onem2m::mgmtResource& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  sg_mgmtResource (::xercesc::XMLFormatTarget& ft,
                   const ::onem2m::mgmtResource& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  sg_mgmtResource (::xercesc::XMLFormatTarget& ft,
                   const ::onem2m::mgmtResource& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  sg_mgmtResource (::xercesc::DOMDocument& d,
                   const ::onem2m::mgmtResource& x,
                   ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  sg_mgmtResource (const ::onem2m::mgmtResource& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  sg_announcedMgmtResource (::std::ostream& os,
                            const ::onem2m::announcedMgmtResource& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

  void
  sg_announcedMgmtResource (::std::ostream& os,
                            const ::onem2m::announcedMgmtResource& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

  void
  sg_announcedMgmtResource (::std::ostream& os,
                            const ::onem2m::announcedMgmtResource& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  sg_announcedMgmtResource (::xercesc::XMLFormatTarget& ft,
                            const ::onem2m::announcedMgmtResource& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

  void
  sg_announcedMgmtResource (::xercesc::XMLFormatTarget& ft,
                            const ::onem2m::announcedMgmtResource& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

  void
  sg_announcedMgmtResource (::xercesc::XMLFormatTarget& ft,
                            const ::onem2m::announcedMgmtResource& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  sg_announcedMgmtResource (::xercesc::DOMDocument& d,
                            const ::onem2m::announcedMgmtResource& x,
                            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  sg_announcedMgmtResource (const ::onem2m::announcedMgmtResource& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  primitiveContent_ (::std::ostream& os,
                     const ::onem2m::primitiveContent& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  primitiveContent_ (::std::ostream& os,
                     const ::onem2m::primitiveContent& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  primitiveContent_ (::std::ostream& os,
                     const ::onem2m::primitiveContent& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  primitiveContent_ (::xercesc::XMLFormatTarget& ft,
                     const ::onem2m::primitiveContent& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  primitiveContent_ (::xercesc::XMLFormatTarget& ft,
                     const ::onem2m::primitiveContent& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  primitiveContent_ (::xercesc::XMLFormatTarget& ft,
                     const ::onem2m::primitiveContent& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  primitiveContent_ (::xercesc::DOMDocument& d,
                     const ::onem2m::primitiveContent& x,
                     ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  primitiveContent_ (const ::onem2m::primitiveContent& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const absRelTimestamp_member&);

  void
  operator<< (::xercesc::DOMAttr&, const absRelTimestamp_member&);

  void
  operator<< (::xml_schema::list_stream&,
              const absRelTimestamp_member&);

  void
  operator<< (::xercesc::DOMElement&, const absRelTimestamp_member1&);

  void
  operator<< (::xercesc::DOMAttr&, const absRelTimestamp_member1&);

  void
  operator<< (::xml_schema::list_stream&,
              const absRelTimestamp_member1&);

  void
  operator<< (::xercesc::DOMElement&, const missingDataList_member&);

  void
  operator<< (::xercesc::DOMAttr&, const missingDataList_member&);

  void
  operator<< (::xml_schema::list_stream&,
              const missingDataList_member&);

  void
  operator<< (::xercesc::DOMElement&, const missingDataList_member1&);

  void
  operator<< (::xercesc::DOMAttr&, const missingDataList_member1&);

  void
  operator<< (::xml_schema::list_stream&,
              const missingDataList_member1&);

  void
  operator<< (::xercesc::DOMElement&, const dynAuthJWT_member&);

  void
  operator<< (::xercesc::DOMAttr&, const dynAuthJWT_member&);

  void
  operator<< (::xml_schema::list_stream&,
              const dynAuthJWT_member&);

  void
  operator<< (::xercesc::DOMElement&, const dynAuthJWT_member1&);

  void
  operator<< (::xercesc::DOMAttr&, const dynAuthJWT_member1&);

  void
  operator<< (::xml_schema::list_stream&,
              const dynAuthJWT_member1&);

  void
  operator<< (::xercesc::DOMElement&, const notificationURI_base&);

  void
  operator<< (::xercesc::DOMAttr&, const notificationURI_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const notificationURI_base&);

  void
  operator<< (::xercesc::DOMElement&, const notificationURI&);

  void
  operator<< (::xercesc::DOMAttr&, const notificationURI&);

  void
  operator<< (::xml_schema::list_stream&,
              const notificationURI&);

  void
  operator<< (::xercesc::DOMElement&, const URIReference&);

  void
  operator<< (::xercesc::DOMElement&, const countryCode1_base&);

  void
  operator<< (::xercesc::DOMAttr&, const countryCode1_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const countryCode1_base&);

  void
  operator<< (::xercesc::DOMElement&, const countryCode1&);

  void
  operator<< (::xercesc::DOMAttr&, const countryCode1&);

  void
  operator<< (::xml_schema::list_stream&,
              const countryCode1&);

  void
  operator<< (::xercesc::DOMElement&, const circRegion_base&);

  void
  operator<< (::xercesc::DOMAttr&, const circRegion_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const circRegion_base&);

  void
  operator<< (::xercesc::DOMElement&, const circRegion&);

  void
  operator<< (::xercesc::DOMAttr&, const circRegion&);

  void
  operator<< (::xml_schema::list_stream&,
              const circRegion&);

  void
  operator<< (::xercesc::DOMElement&, const announcedAttribute_base&);

  void
  operator<< (::xercesc::DOMAttr&, const announcedAttribute_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const announcedAttribute_base&);

  void
  operator<< (::xercesc::DOMElement&, const announcedAttribute&);

  void
  operator<< (::xercesc::DOMAttr&, const announcedAttribute&);

  void
  operator<< (::xml_schema::list_stream&,
              const announcedAttribute&);

  void
  operator<< (::xercesc::DOMElement&, const announcedAttribute1_base&);

  void
  operator<< (::xercesc::DOMAttr&, const announcedAttribute1_base&);

  void
  operator<< (::xml_schema::list_stream&,
              const announcedAttribute1_base&);

  void
  operator<< (::xercesc::DOMElement&, const announcedAttribute1&);

  void
  operator<< (::xercesc::DOMAttr&, const announcedAttribute1&);

  void
  operator<< (::xml_schema::list_stream&,
              const announcedAttribute1&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
#include "../CDT-commonTypes-custom.hxx"
//
// End epilogue.

#endif // XSD_V3_2_0_ED_CDT_COMMON_TYPES_HXX
