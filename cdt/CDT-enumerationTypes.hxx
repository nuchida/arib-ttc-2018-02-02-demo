// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSD_V3_2_0_ED_CDT_ENUMERATION_TYPES_HXX
#define XSD_V3_2_0_ED_CDT_ENUMERATION_TYPES_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::unique_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace onem2m
{
  class resourceType;
  class cseTypeID;
  class locationSource;
  class stdEventCats;
  class operation;
  class responseType;
  class resultContent;
  class discResType;
  class responseStatusCode;
  class requestStatus;
  class memberType;
  class consistencyStrategy;
  class cmdType;
  class execModeType;
  class execStatusType;
  class execResultType;
  class pendingNotification;
  class notificationContentType;
  class notificationEventType;
  class status;
  class batteryStatus;
  class mgmtDefinition;
  class logTypeId;
  class logStatus;
  class eventType;
  class statsRuleStatusType;
  class statModelType;
  class encodingType;
  class accessControlOperations;
  class filterUsage;
  class notificationTargetPolicyAction;
  class logicalOperator;
  class allJoynDirection;
  class contentFilterSyntax;
  class contentSecurity;
  class suid;
  class esprimKeyGenAlgID;
  class esprimProtocolAndAlgID;
  class periodicIndicator;
  class stationaryIndication;
  class contentStatus;
  class networkAction;
  class triggerPurpose;
  class serializationType;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

namespace onem2m
{
  class resourceType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    resourceType (::xml_schema::integer v);

    resourceType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    resourceType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    resourceType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    resourceType (const resourceType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual resourceType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class cseTypeID: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    cseTypeID (::xml_schema::integer v);

    cseTypeID (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    cseTypeID (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    cseTypeID (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    cseTypeID (const cseTypeID& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual cseTypeID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class locationSource: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    locationSource (::xml_schema::integer v);

    locationSource (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    locationSource (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    locationSource (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    locationSource (const locationSource& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual locationSource*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class stdEventCats: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    stdEventCats (::xml_schema::integer v);

    stdEventCats (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    stdEventCats (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    stdEventCats (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    stdEventCats (const stdEventCats& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual stdEventCats*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class operation: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    operation (::xml_schema::integer v);

    operation (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    operation (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    operation (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    operation (const operation& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual operation*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class responseType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    responseType (::xml_schema::integer v);

    responseType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    responseType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    responseType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    responseType (const responseType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual responseType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class resultContent: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    resultContent (::xml_schema::integer v);

    resultContent (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    resultContent (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    resultContent (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    resultContent (const resultContent& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual resultContent*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class discResType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    discResType (::xml_schema::integer v);

    discResType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    discResType (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    discResType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    discResType (const discResType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual discResType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class responseStatusCode: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    responseStatusCode (::xml_schema::integer v);

    responseStatusCode (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    responseStatusCode (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    responseStatusCode (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    responseStatusCode (const responseStatusCode& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual responseStatusCode*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class requestStatus: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    requestStatus (::xml_schema::integer v);

    requestStatus (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    requestStatus (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    requestStatus (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    requestStatus (const requestStatus& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual requestStatus*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class memberType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    memberType (::xml_schema::integer v);

    memberType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    memberType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    memberType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    memberType (const memberType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual memberType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class consistencyStrategy: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    consistencyStrategy (::xml_schema::integer v);

    consistencyStrategy (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    consistencyStrategy (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    consistencyStrategy (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    consistencyStrategy (const consistencyStrategy& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual consistencyStrategy*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class cmdType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    cmdType (::xml_schema::integer v);

    cmdType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    cmdType (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    cmdType (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    cmdType (const cmdType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual cmdType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class execModeType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    execModeType (::xml_schema::integer v);

    execModeType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    execModeType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    execModeType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    execModeType (const execModeType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual execModeType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class execStatusType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    execStatusType (::xml_schema::integer v);

    execStatusType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    execStatusType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    execStatusType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    execStatusType (const execStatusType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual execStatusType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class execResultType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    execResultType (::xml_schema::integer v);

    execResultType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    execResultType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    execResultType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    execResultType (const execResultType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual execResultType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class pendingNotification: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    pendingNotification (::xml_schema::integer v);

    pendingNotification (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    pendingNotification (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    pendingNotification (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    pendingNotification (const pendingNotification& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual pendingNotification*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class notificationContentType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    notificationContentType (::xml_schema::integer v);

    notificationContentType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    notificationContentType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    notificationContentType (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    notificationContentType (const notificationContentType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual notificationContentType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class notificationEventType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    notificationEventType (::xml_schema::integer v);

    notificationEventType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    notificationEventType (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    notificationEventType (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    notificationEventType (const notificationEventType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual notificationEventType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class status: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    status (::xml_schema::integer v);

    status (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    status (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    status (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    status (const status& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual status*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class batteryStatus: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    batteryStatus (::xml_schema::integer v);

    batteryStatus (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    batteryStatus (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    batteryStatus (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    batteryStatus (const batteryStatus& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual batteryStatus*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class mgmtDefinition: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    mgmtDefinition (::xml_schema::integer v);

    mgmtDefinition (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    mgmtDefinition (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    mgmtDefinition (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    mgmtDefinition (const mgmtDefinition& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual mgmtDefinition*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class logTypeId: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    logTypeId (::xml_schema::integer v);

    logTypeId (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    logTypeId (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    logTypeId (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    logTypeId (const logTypeId& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual logTypeId*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class logStatus: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    logStatus (::xml_schema::integer v);

    logStatus (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    logStatus (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    logStatus (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    logStatus (const logStatus& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual logStatus*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class eventType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    eventType (::xml_schema::integer v);

    eventType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    eventType (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    eventType (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    eventType (const eventType& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual eventType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class statsRuleStatusType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    statsRuleStatusType (::xml_schema::integer v);

    statsRuleStatusType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    statsRuleStatusType (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    statsRuleStatusType (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    statsRuleStatusType (const statsRuleStatusType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual statsRuleStatusType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class statModelType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    statModelType (::xml_schema::integer v);

    statModelType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    statModelType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    statModelType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    statModelType (const statModelType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual statModelType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class encodingType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    encodingType (::xml_schema::integer v);

    encodingType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    encodingType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    encodingType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    encodingType (const encodingType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual encodingType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class accessControlOperations: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    accessControlOperations (::xml_schema::integer v);

    accessControlOperations (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    accessControlOperations (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    accessControlOperations (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    accessControlOperations (const accessControlOperations& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual accessControlOperations*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class filterUsage: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    filterUsage (::xml_schema::integer v);

    filterUsage (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    filterUsage (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    filterUsage (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    filterUsage (const filterUsage& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual filterUsage*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class notificationTargetPolicyAction: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    notificationTargetPolicyAction (::xml_schema::integer v);

    notificationTargetPolicyAction (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    notificationTargetPolicyAction (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    notificationTargetPolicyAction (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    notificationTargetPolicyAction (const notificationTargetPolicyAction& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    virtual notificationTargetPolicyAction*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class logicalOperator: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    logicalOperator (::xml_schema::integer v);

    logicalOperator (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    logicalOperator (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    logicalOperator (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    logicalOperator (const logicalOperator& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual logicalOperator*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class allJoynDirection: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    allJoynDirection (::xml_schema::integer v);

    allJoynDirection (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    allJoynDirection (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    allJoynDirection (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    allJoynDirection (const allJoynDirection& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual allJoynDirection*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class contentFilterSyntax: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    contentFilterSyntax (::xml_schema::integer v);

    contentFilterSyntax (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    contentFilterSyntax (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    contentFilterSyntax (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    contentFilterSyntax (const contentFilterSyntax& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual contentFilterSyntax*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class contentSecurity: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    contentSecurity (::xml_schema::integer v);

    contentSecurity (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    contentSecurity (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    contentSecurity (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    contentSecurity (const contentSecurity& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual contentSecurity*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class suid: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    suid (::xml_schema::integer v);

    suid (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    suid (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    suid (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    suid (const suid& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual suid*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class esprimKeyGenAlgID: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    esprimKeyGenAlgID (::xml_schema::integer v);

    esprimKeyGenAlgID (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    esprimKeyGenAlgID (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    esprimKeyGenAlgID (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    esprimKeyGenAlgID (const esprimKeyGenAlgID& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual esprimKeyGenAlgID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class esprimProtocolAndAlgID: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    esprimProtocolAndAlgID (::xml_schema::integer v);

    esprimProtocolAndAlgID (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    esprimProtocolAndAlgID (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    esprimProtocolAndAlgID (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    esprimProtocolAndAlgID (const esprimProtocolAndAlgID& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual esprimProtocolAndAlgID*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class periodicIndicator: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    periodicIndicator (::xml_schema::integer v);

    periodicIndicator (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    periodicIndicator (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    periodicIndicator (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    periodicIndicator (const periodicIndicator& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual periodicIndicator*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class stationaryIndication: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    stationaryIndication (::xml_schema::integer v);

    stationaryIndication (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    stationaryIndication (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    stationaryIndication (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    stationaryIndication (const stationaryIndication& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual stationaryIndication*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class contentStatus: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    contentStatus (::xml_schema::integer v);

    contentStatus (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    contentStatus (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    contentStatus (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    contentStatus (const contentStatus& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual contentStatus*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class networkAction: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    networkAction (::xml_schema::integer v);

    networkAction (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    networkAction (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    networkAction (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    networkAction (const networkAction& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual networkAction*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class triggerPurpose: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    triggerPurpose (::xml_schema::integer v);

    triggerPurpose (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    triggerPurpose (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    triggerPurpose (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    triggerPurpose (const triggerPurpose& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual triggerPurpose*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class serializationType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    serializationType (::xml_schema::integer v);

    serializationType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    serializationType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    serializationType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    serializationType (const serializationType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual serializationType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };
}

#include <iosfwd>

namespace onem2m
{
  ::std::ostream&
  operator<< (::std::ostream&, const resourceType&);

  ::std::ostream&
  operator<< (::std::ostream&, const cseTypeID&);

  ::std::ostream&
  operator<< (::std::ostream&, const locationSource&);

  ::std::ostream&
  operator<< (::std::ostream&, const stdEventCats&);

  ::std::ostream&
  operator<< (::std::ostream&, const operation&);

  ::std::ostream&
  operator<< (::std::ostream&, const responseType&);

  ::std::ostream&
  operator<< (::std::ostream&, const resultContent&);

  ::std::ostream&
  operator<< (::std::ostream&, const discResType&);

  ::std::ostream&
  operator<< (::std::ostream&, const responseStatusCode&);

  ::std::ostream&
  operator<< (::std::ostream&, const requestStatus&);

  ::std::ostream&
  operator<< (::std::ostream&, const memberType&);

  ::std::ostream&
  operator<< (::std::ostream&, const consistencyStrategy&);

  ::std::ostream&
  operator<< (::std::ostream&, const cmdType&);

  ::std::ostream&
  operator<< (::std::ostream&, const execModeType&);

  ::std::ostream&
  operator<< (::std::ostream&, const execStatusType&);

  ::std::ostream&
  operator<< (::std::ostream&, const execResultType&);

  ::std::ostream&
  operator<< (::std::ostream&, const pendingNotification&);

  ::std::ostream&
  operator<< (::std::ostream&, const notificationContentType&);

  ::std::ostream&
  operator<< (::std::ostream&, const notificationEventType&);

  ::std::ostream&
  operator<< (::std::ostream&, const status&);

  ::std::ostream&
  operator<< (::std::ostream&, const batteryStatus&);

  ::std::ostream&
  operator<< (::std::ostream&, const mgmtDefinition&);

  ::std::ostream&
  operator<< (::std::ostream&, const logTypeId&);

  ::std::ostream&
  operator<< (::std::ostream&, const logStatus&);

  ::std::ostream&
  operator<< (::std::ostream&, const eventType&);

  ::std::ostream&
  operator<< (::std::ostream&, const statsRuleStatusType&);

  ::std::ostream&
  operator<< (::std::ostream&, const statModelType&);

  ::std::ostream&
  operator<< (::std::ostream&, const encodingType&);

  ::std::ostream&
  operator<< (::std::ostream&, const accessControlOperations&);

  ::std::ostream&
  operator<< (::std::ostream&, const filterUsage&);

  ::std::ostream&
  operator<< (::std::ostream&, const notificationTargetPolicyAction&);

  ::std::ostream&
  operator<< (::std::ostream&, const logicalOperator&);

  ::std::ostream&
  operator<< (::std::ostream&, const allJoynDirection&);

  ::std::ostream&
  operator<< (::std::ostream&, const contentFilterSyntax&);

  ::std::ostream&
  operator<< (::std::ostream&, const contentSecurity&);

  ::std::ostream&
  operator<< (::std::ostream&, const suid&);

  ::std::ostream&
  operator<< (::std::ostream&, const esprimKeyGenAlgID&);

  ::std::ostream&
  operator<< (::std::ostream&, const esprimProtocolAndAlgID&);

  ::std::ostream&
  operator<< (::std::ostream&, const periodicIndicator&);

  ::std::ostream&
  operator<< (::std::ostream&, const stationaryIndication&);

  ::std::ostream&
  operator<< (::std::ostream&, const contentStatus&);

  ::std::ostream&
  operator<< (::std::ostream&, const networkAction&);

  ::std::ostream&
  operator<< (::std::ostream&, const triggerPurpose&);

  ::std::ostream&
  operator<< (::std::ostream&, const serializationType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace onem2m
{
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace onem2m
{
  void
  operator<< (::xercesc::DOMElement&, const resourceType&);

  void
  operator<< (::xercesc::DOMAttr&, const resourceType&);

  void
  operator<< (::xml_schema::list_stream&,
              const resourceType&);

  void
  operator<< (::xercesc::DOMElement&, const cseTypeID&);

  void
  operator<< (::xercesc::DOMAttr&, const cseTypeID&);

  void
  operator<< (::xml_schema::list_stream&,
              const cseTypeID&);

  void
  operator<< (::xercesc::DOMElement&, const locationSource&);

  void
  operator<< (::xercesc::DOMAttr&, const locationSource&);

  void
  operator<< (::xml_schema::list_stream&,
              const locationSource&);

  void
  operator<< (::xercesc::DOMElement&, const stdEventCats&);

  void
  operator<< (::xercesc::DOMAttr&, const stdEventCats&);

  void
  operator<< (::xml_schema::list_stream&,
              const stdEventCats&);

  void
  operator<< (::xercesc::DOMElement&, const operation&);

  void
  operator<< (::xercesc::DOMAttr&, const operation&);

  void
  operator<< (::xml_schema::list_stream&,
              const operation&);

  void
  operator<< (::xercesc::DOMElement&, const responseType&);

  void
  operator<< (::xercesc::DOMAttr&, const responseType&);

  void
  operator<< (::xml_schema::list_stream&,
              const responseType&);

  void
  operator<< (::xercesc::DOMElement&, const resultContent&);

  void
  operator<< (::xercesc::DOMAttr&, const resultContent&);

  void
  operator<< (::xml_schema::list_stream&,
              const resultContent&);

  void
  operator<< (::xercesc::DOMElement&, const discResType&);

  void
  operator<< (::xercesc::DOMAttr&, const discResType&);

  void
  operator<< (::xml_schema::list_stream&,
              const discResType&);

  void
  operator<< (::xercesc::DOMElement&, const responseStatusCode&);

  void
  operator<< (::xercesc::DOMAttr&, const responseStatusCode&);

  void
  operator<< (::xml_schema::list_stream&,
              const responseStatusCode&);

  void
  operator<< (::xercesc::DOMElement&, const requestStatus&);

  void
  operator<< (::xercesc::DOMAttr&, const requestStatus&);

  void
  operator<< (::xml_schema::list_stream&,
              const requestStatus&);

  void
  operator<< (::xercesc::DOMElement&, const memberType&);

  void
  operator<< (::xercesc::DOMAttr&, const memberType&);

  void
  operator<< (::xml_schema::list_stream&,
              const memberType&);

  void
  operator<< (::xercesc::DOMElement&, const consistencyStrategy&);

  void
  operator<< (::xercesc::DOMAttr&, const consistencyStrategy&);

  void
  operator<< (::xml_schema::list_stream&,
              const consistencyStrategy&);

  void
  operator<< (::xercesc::DOMElement&, const cmdType&);

  void
  operator<< (::xercesc::DOMAttr&, const cmdType&);

  void
  operator<< (::xml_schema::list_stream&,
              const cmdType&);

  void
  operator<< (::xercesc::DOMElement&, const execModeType&);

  void
  operator<< (::xercesc::DOMAttr&, const execModeType&);

  void
  operator<< (::xml_schema::list_stream&,
              const execModeType&);

  void
  operator<< (::xercesc::DOMElement&, const execStatusType&);

  void
  operator<< (::xercesc::DOMAttr&, const execStatusType&);

  void
  operator<< (::xml_schema::list_stream&,
              const execStatusType&);

  void
  operator<< (::xercesc::DOMElement&, const execResultType&);

  void
  operator<< (::xercesc::DOMAttr&, const execResultType&);

  void
  operator<< (::xml_schema::list_stream&,
              const execResultType&);

  void
  operator<< (::xercesc::DOMElement&, const pendingNotification&);

  void
  operator<< (::xercesc::DOMAttr&, const pendingNotification&);

  void
  operator<< (::xml_schema::list_stream&,
              const pendingNotification&);

  void
  operator<< (::xercesc::DOMElement&, const notificationContentType&);

  void
  operator<< (::xercesc::DOMAttr&, const notificationContentType&);

  void
  operator<< (::xml_schema::list_stream&,
              const notificationContentType&);

  void
  operator<< (::xercesc::DOMElement&, const notificationEventType&);

  void
  operator<< (::xercesc::DOMAttr&, const notificationEventType&);

  void
  operator<< (::xml_schema::list_stream&,
              const notificationEventType&);

  void
  operator<< (::xercesc::DOMElement&, const status&);

  void
  operator<< (::xercesc::DOMAttr&, const status&);

  void
  operator<< (::xml_schema::list_stream&,
              const status&);

  void
  operator<< (::xercesc::DOMElement&, const batteryStatus&);

  void
  operator<< (::xercesc::DOMAttr&, const batteryStatus&);

  void
  operator<< (::xml_schema::list_stream&,
              const batteryStatus&);

  void
  operator<< (::xercesc::DOMElement&, const mgmtDefinition&);

  void
  operator<< (::xercesc::DOMAttr&, const mgmtDefinition&);

  void
  operator<< (::xml_schema::list_stream&,
              const mgmtDefinition&);

  void
  operator<< (::xercesc::DOMElement&, const logTypeId&);

  void
  operator<< (::xercesc::DOMAttr&, const logTypeId&);

  void
  operator<< (::xml_schema::list_stream&,
              const logTypeId&);

  void
  operator<< (::xercesc::DOMElement&, const logStatus&);

  void
  operator<< (::xercesc::DOMAttr&, const logStatus&);

  void
  operator<< (::xml_schema::list_stream&,
              const logStatus&);

  void
  operator<< (::xercesc::DOMElement&, const eventType&);

  void
  operator<< (::xercesc::DOMAttr&, const eventType&);

  void
  operator<< (::xml_schema::list_stream&,
              const eventType&);

  void
  operator<< (::xercesc::DOMElement&, const statsRuleStatusType&);

  void
  operator<< (::xercesc::DOMAttr&, const statsRuleStatusType&);

  void
  operator<< (::xml_schema::list_stream&,
              const statsRuleStatusType&);

  void
  operator<< (::xercesc::DOMElement&, const statModelType&);

  void
  operator<< (::xercesc::DOMAttr&, const statModelType&);

  void
  operator<< (::xml_schema::list_stream&,
              const statModelType&);

  void
  operator<< (::xercesc::DOMElement&, const encodingType&);

  void
  operator<< (::xercesc::DOMAttr&, const encodingType&);

  void
  operator<< (::xml_schema::list_stream&,
              const encodingType&);

  void
  operator<< (::xercesc::DOMElement&, const accessControlOperations&);

  void
  operator<< (::xercesc::DOMAttr&, const accessControlOperations&);

  void
  operator<< (::xml_schema::list_stream&,
              const accessControlOperations&);

  void
  operator<< (::xercesc::DOMElement&, const filterUsage&);

  void
  operator<< (::xercesc::DOMAttr&, const filterUsage&);

  void
  operator<< (::xml_schema::list_stream&,
              const filterUsage&);

  void
  operator<< (::xercesc::DOMElement&, const notificationTargetPolicyAction&);

  void
  operator<< (::xercesc::DOMAttr&, const notificationTargetPolicyAction&);

  void
  operator<< (::xml_schema::list_stream&,
              const notificationTargetPolicyAction&);

  void
  operator<< (::xercesc::DOMElement&, const logicalOperator&);

  void
  operator<< (::xercesc::DOMAttr&, const logicalOperator&);

  void
  operator<< (::xml_schema::list_stream&,
              const logicalOperator&);

  void
  operator<< (::xercesc::DOMElement&, const allJoynDirection&);

  void
  operator<< (::xercesc::DOMAttr&, const allJoynDirection&);

  void
  operator<< (::xml_schema::list_stream&,
              const allJoynDirection&);

  void
  operator<< (::xercesc::DOMElement&, const contentFilterSyntax&);

  void
  operator<< (::xercesc::DOMAttr&, const contentFilterSyntax&);

  void
  operator<< (::xml_schema::list_stream&,
              const contentFilterSyntax&);

  void
  operator<< (::xercesc::DOMElement&, const contentSecurity&);

  void
  operator<< (::xercesc::DOMAttr&, const contentSecurity&);

  void
  operator<< (::xml_schema::list_stream&,
              const contentSecurity&);

  void
  operator<< (::xercesc::DOMElement&, const suid&);

  void
  operator<< (::xercesc::DOMAttr&, const suid&);

  void
  operator<< (::xml_schema::list_stream&,
              const suid&);

  void
  operator<< (::xercesc::DOMElement&, const esprimKeyGenAlgID&);

  void
  operator<< (::xercesc::DOMAttr&, const esprimKeyGenAlgID&);

  void
  operator<< (::xml_schema::list_stream&,
              const esprimKeyGenAlgID&);

  void
  operator<< (::xercesc::DOMElement&, const esprimProtocolAndAlgID&);

  void
  operator<< (::xercesc::DOMAttr&, const esprimProtocolAndAlgID&);

  void
  operator<< (::xml_schema::list_stream&,
              const esprimProtocolAndAlgID&);

  void
  operator<< (::xercesc::DOMElement&, const periodicIndicator&);

  void
  operator<< (::xercesc::DOMAttr&, const periodicIndicator&);

  void
  operator<< (::xml_schema::list_stream&,
              const periodicIndicator&);

  void
  operator<< (::xercesc::DOMElement&, const stationaryIndication&);

  void
  operator<< (::xercesc::DOMAttr&, const stationaryIndication&);

  void
  operator<< (::xml_schema::list_stream&,
              const stationaryIndication&);

  void
  operator<< (::xercesc::DOMElement&, const contentStatus&);

  void
  operator<< (::xercesc::DOMAttr&, const contentStatus&);

  void
  operator<< (::xml_schema::list_stream&,
              const contentStatus&);

  void
  operator<< (::xercesc::DOMElement&, const networkAction&);

  void
  operator<< (::xercesc::DOMAttr&, const networkAction&);

  void
  operator<< (::xml_schema::list_stream&,
              const networkAction&);

  void
  operator<< (::xercesc::DOMElement&, const triggerPurpose&);

  void
  operator<< (::xercesc::DOMAttr&, const triggerPurpose&);

  void
  operator<< (::xml_schema::list_stream&,
              const triggerPurpose&);

  void
  operator<< (::xercesc::DOMElement&, const serializationType&);

  void
  operator<< (::xercesc::DOMAttr&, const serializationType&);

  void
  operator<< (::xml_schema::list_stream&,
              const serializationType&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XSD_V3_2_0_ED_CDT_ENUMERATION_TYPES_HXX
